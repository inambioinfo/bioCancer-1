
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "radiant"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('radiant')
Loading required package: magrittr
Loading required package: ggplot2
Loading required package: tidyr

Attaching package: ‘tidyr’

The following object is masked from ‘package:magrittr’:

    extract

Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘radiant’

The following object is masked from ‘package:ggplot2’:

    diamonds

>
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("changedata")
> ### * changedata
>
> flush(stderr()); flush(stdout())
>
> ### Name: changedata
> ### Title: Change data
> ### Aliases: changedata
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("clean_loadings")
> ### * clean_loadings
>
> flush(stderr()); flush(stdout())
>
> ### Name: clean_loadings
> ### Title: Sort and clean loadings
> ### Aliases: clean_loadings
>
> ### ** Examples
>
> result <- full_factor("diamonds",c("price","carat","table","x","y"))
> clean_loadings(result$floadings, TRUE, .5, 2)
      PC1 PC2
carat
y
x
price
table
>
>
>
> cleanEx()
> nameEx("combinedata")
> ### * combinedata
>
> flush(stderr()); flush(stdout())
>
> ### Name: combinedata
> ### Title: Combine datasets using dplyr's bind and join functions
> ### Aliases: combinedata
>
> ### ** Examples
>
> combinedata("titanic","titanic_pred",c("pclass","sex","age")) %>% head
  pclass survived                            name    sex age sibsp parch ticket     fare   cabin    embarked
1    1st       No Allison, Mr. Hudson Joshua Crei   male  30     1     2 113781 151.5500 C22 C26 Southampton
2    1st      Yes         Bonnell, Miss. Caroline female  30     0     0  36928 164.8667      C7 Southampton
3    1st      Yes            Cherry, Miss. Gladys female  30     0     0 110152  86.5000     B77 Southampton
4    1st       No Foreman, Mr. Benjamin Laventall   male  30     0     0 113051  27.7500    C111   Cherbourg
5    1st      Yes  Francatelli, Miss. Laura Mabel female  30     0     0     NA  56.9292     E36   Cherbourg
6    1st      Yes             LeRoy, Miss. Bertha female  30     0     0     NA 106.4250           Cherbourg
> titanic %>% combinedata("titanic_pred",c("pclass","sex","age")) %>% head
  pclass survived                            name    sex age sibsp parch ticket     fare   cabin    embarked
1    1st       No Allison, Mr. Hudson Joshua Crei   male  30     1     2 113781 151.5500 C22 C26 Southampton
2    1st      Yes         Bonnell, Miss. Caroline female  30     0     0  36928 164.8667      C7 Southampton
3    1st      Yes            Cherry, Miss. Gladys female  30     0     0 110152  86.5000     B77 Southampton
4    1st       No Foreman, Mr. Benjamin Laventall   male  30     0     0 113051  27.7500    C111   Cherbourg
5    1st      Yes  Francatelli, Miss. Laura Mabel female  30     0     0     NA  56.9292     E36   Cherbourg
6    1st      Yes             LeRoy, Miss. Bertha female  30     0     0     NA 106.4250           Cherbourg
> titanic %>% combinedata(titanic_pred,c("pclass","sex","age")) %>% head
  pclass survived                            name    sex age sibsp parch ticket     fare   cabin    embarked
1    1st       No Allison, Mr. Hudson Joshua Crei   male  30     1     2 113781 151.5500 C22 C26 Southampton
2    1st      Yes         Bonnell, Miss. Caroline female  30     0     0  36928 164.8667      C7 Southampton
3    1st      Yes            Cherry, Miss. Gladys female  30     0     0 110152  86.5000     B77 Southampton
4    1st       No Foreman, Mr. Benjamin Laventall   male  30     0     0 113051  27.7500    C111   Cherbourg
5    1st      Yes  Francatelli, Miss. Laura Mabel female  30     0     0     NA  56.9292     E36   Cherbourg
6    1st      Yes             LeRoy, Miss. Bertha female  30     0     0     NA 106.4250           Cherbourg
> avengers %>% combinedata(superheroes, type = "bind_cols")
Source: local data frame [7 x 8]

             name alignment gender publisher   name.1 alignment.1 gender.1       publisher.1
1            Thor      good   male    Marvel  Magneto         bad     male            Marvel
2        Iron Man      good   male    Marvel    Storm        good   female            Marvel
3            Hulk      good   male    Marvel Mystique         bad   female            Marvel
4         Hawkeye      good   male    Marvel   Batman        good     male                DC
5     Black Widow      good female    Marvel    Joker         bad     male                DC
6 Captain America      good   male    Marvel Catwoman         bad   female                DC
7         Magneto       bad   male    Marvel  Hellboy        good     male Dark Horse Comics
> combinedata("avengers", "superheroes", type = "bind_cols")
Source: local data frame [7 x 8]

             name alignment gender publisher   name.1 alignment.1 gender.1       publisher.1
1            Thor      good   male    Marvel  Magneto         bad     male            Marvel
2        Iron Man      good   male    Marvel    Storm        good   female            Marvel
3            Hulk      good   male    Marvel Mystique         bad   female            Marvel
4         Hawkeye      good   male    Marvel   Batman        good     male                DC
5     Black Widow      good female    Marvel    Joker         bad     male                DC
6 Captain America      good   male    Marvel Catwoman         bad   female                DC
7         Magneto       bad   male    Marvel  Hellboy        good     male Dark Horse Comics
> avengers %>% combinedata(superheroes, type = "bind_rows")
Source: local data frame [14 x 4]

              name alignment gender         publisher
1             Thor      good   male            Marvel
2         Iron Man      good   male            Marvel
3             Hulk      good   male            Marvel
4          Hawkeye      good   male            Marvel
5      Black Widow      good female            Marvel
6  Captain America      good   male            Marvel
7          Magneto       bad   male            Marvel
8          Magneto       bad   male            Marvel
9            Storm      good female            Marvel
10        Mystique       bad female            Marvel
11          Batman      good   male                DC
12           Joker       bad   male                DC
13        Catwoman       bad female                DC
14         Hellboy      good   male Dark Horse Comics
>
>
>
> cleanEx()
> nameEx("compare_means")
> ### * compare_means
>
> flush(stderr()); flush(stdout())
>
> ### Name: compare_means
> ### Title: Compare means for two or more variables
> ### Aliases: compare_means
>
> ### ** Examples
>
> result <- compare_means("diamonds","cut","price")
> result <- diamonds %>% compare_means("cut","price")
>
>
>
> cleanEx()
> nameEx("compare_props")
> ### * compare_props
>
> flush(stderr()); flush(stdout())
>
> ### Name: compare_props
> ### Title: Compare proportions across groups
> ### Aliases: compare_props
>
> ### ** Examples
>
> result <- compare_props("titanic", "pclass", "survived")
> result <- titanic %>% compare_props("pclass", "survived")
>
>
>
> cleanEx()
> nameEx("conjoint")
> ### * conjoint
>
> flush(stderr()); flush(stdout())
>
> ### Name: conjoint
> ### Title: Conjoint analysis
> ### Aliases: conjoint
>
> ### ** Examples
>
> result <- conjoint("mp3", dep_var = "Rating", indep_var = "Memory:Shape")
> result <- mp3 %>% conjoint(dep_var = "Rating", indep_var = "Memory:Shape")
>
>
>
> cleanEx()
> nameEx("conjoint_profiles")
> ### * conjoint_profiles
>
> flush(stderr()); flush(stdout())
>
> ### Name: conjoint_profiles
> ### Title: Create fractional factorial design for conjoint analysis
> ### Aliases: conjoint_profiles
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("copy_all")
> ### * copy_all
>
> flush(stderr()); flush(stdout())
>
> ### Name: copy_all
> ### Title: Source all package functions
> ### Aliases: copy_all
>
> ### ** Examples
>
> copy_all(radiant)
>
>
>
> cleanEx()
> nameEx("copy_from")
> ### * copy_from
>
> flush(stderr()); flush(stdout())
>
> ### Name: copy_from
> ### Title: Source for package functions
> ### Aliases: copy_from
>
> ### ** Examples
>
> copy_from(radiant, state_init)
>
>
>
> cleanEx()
> nameEx("correlation")
> ### * correlation
>
> flush(stderr()); flush(stdout())
>
> ### Name: correlation
> ### Title: Calculate correlations for two or more variables
> ### Aliases: correlation
>
> ### ** Examples
>
> result <- correlation("diamonds", c("price","carat","clarity"))
> result <- correlation("diamonds", "price:table")
> result <- diamonds %>% correlation("price:table")
>
>
>
> cleanEx()
> nameEx("cross_tabs")
> ### * cross_tabs
>
> flush(stderr()); flush(stdout())
>
> ### Name: cross_tabs
> ### Title: Evaluate associations between categorical variables
> ### Aliases: cross_tabs
>
> ### ** Examples
>
> result <- cross_tabs("newspaper", "Income", "Newspaper")
> result <- newspaper %>% cross_tabs("Income", "Newspaper")
>
>
>
> cleanEx()
> nameEx("cv")
> ### * cv
>
> flush(stderr()); flush(stdout())
>
> ### Name: cv
> ### Title: Coefficient of variation
> ### Aliases: cv
>
> ### ** Examples
>
> cv(runif (100))
[1] 0.5167255
>
>
>
> cleanEx()
> nameEx("explore")
> ### * explore
>
> flush(stderr()); flush(stdout())
>
> ### Name: explore
> ### Title: Explore data
> ### Aliases: explore
>
> ### ** Examples
>
> result <- explore("diamonds", "price:x")
> summary(result)
Data      : diamonds
Functions :  mean
Top       :  Function

 variable     mean
    price 3907.186
    carat    0.794
    depth   61.753
    table   57.465
        x    5.722
> result <- explore("diamonds", "price", byvar = "cut", fun = c("length", "skew"))
> summary(result)
Data      : diamonds
Grouped by:  cut
Functions :  n skew
Top       :  Function

       cut variable    n  skew
      Fair    price  101 1.574
      Good    price  275 1.489
 Very Good    price  677 1.601
   Premium    price  771 1.413
     Ideal    price 1176 1.799
> diamonds %>% explore("price", byvar = "cut", fun = c("length", "skew"))
$tab
Source: local data frame [5 x 4]

        cut variable    n     skew
1      Fair    price  101 1.574133
2      Good    price  275 1.488577
3 Very Good    price  677 1.600775
4   Premium    price  771 1.413179
5     Ideal    price 1176 1.798660

$bv
[1] "cut"

$pfun
<fun_calls>
$ n   : length(.)
$ skew: skew(.)

$isNum
price
    1

$tvars
[1] "price" "cut"

$dataset
[1] "-----"

$vars
[1] "price"

$byvar
[1] "cut"

$fun
[1] "length" "skew"

$data_filter
[1] ""

$shiny
[1] FALSE

attr(,"class")
[1] "explore" "list"
>
>
>
> cleanEx()
> nameEx("flip")
> ### * flip
>
> flush(stderr()); flush(stdout())
>
> ### Name: flip
> ### Title: Flip the DT table to put Function, Variable, or Group by on top
> ### Aliases: flip
>
> ### ** Examples
>
> result <- explore("diamonds", "price:x") %>% flip("var")
> result <- explore("diamonds", "price", byvar = "cut", fun = c("length", "skew")) %>%
+   flip("byvar")
>
>
>
> cleanEx()
> nameEx("full_factor")
> ### * full_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: full_factor
> ### Title: Factor analysis (PCA)
> ### Aliases: full_factor
>
> ### ** Examples
>
> result <- full_factor("diamonds",c("price","carat","table","x","y"))
> result <- full_factor("diamonds",c("price","carat","table","x","y"), method = "maxlik")
> result <- diamonds %>% full_factor(c("price","carat","table","x","y"), method = "maxlik")
>
>
>
> cleanEx()
> nameEx("getclass")
> ### * getclass
>
> flush(stderr()); flush(stdout())
>
> ### Name: getclass
> ### Title: Get variable class
> ### Aliases: getclass
>
> ### ** Examples
>
> getclass(mtcars)
      mpg       cyl      disp        hp      drat        wt      qsec        vs        am      gear      carb
"numeric" "numeric" "numeric" "numeric" "numeric" "numeric" "numeric" "numeric" "numeric" "numeric" "numeric"
>
>
>
> cleanEx()
> nameEx("getdata")
> ### * getdata
>
> flush(stderr()); flush(stdout())
>
> ### Name: getdata
> ### Title: Get data for analysis functions
> ### Aliases: getdata
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("glm_reg")
> ### * glm_reg
>
> flush(stderr()); flush(stdout())
>
> ### Name: glm_reg
> ### Title: Generalized linear models (GLM)
> ### Aliases: glm_reg
>
> ### ** Examples
>
> result <- glm_reg("titanic", "survived", c("pclass","sex"), lev = "Yes")
> result <- glm_reg("titanic", "survived", c("pclass","sex"))
>
>
>
> cleanEx()
> nameEx("hier_clus")
> ### * hier_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: hier_clus
> ### Title: Hierarchical cluster analysis
> ### Aliases: hier_clus
>
> ### ** Examples
>
> result <- hier_clus("shopping", vars = c("v1:v6"))
>
>
>
> cleanEx()
> nameEx("is_empty")
> ### * is_empty
>
> flush(stderr()); flush(stdout())
>
> ### Name: is_empty
> ### Title: Is a character variable defined
> ### Aliases: is_empty
>
> ### ** Examples
>
> is_empty("")
[1] TRUE
> is_empty(NULL)
[1] TRUE
>
>
>
> cleanEx()
> nameEx("is_string")
> ### * is_string
>
> flush(stderr()); flush(stdout())
>
> ### Name: is_string
> ### Title: Is input a string?
> ### Aliases: is_string
>
> ### ** Examples
>
> is_string("")
[1] FALSE
> is_string("data")
[1] TRUE
> is_string(c("data","data"))
[1] FALSE
> is_string(NULL)
[1] FALSE
>
>
>
> cleanEx()
> nameEx("iterms")
> ### * iterms
>
> flush(stderr()); flush(stdout())
>
> ### Name: iterms
> ### Title: Create a vector of interaction terms
> ### Aliases: iterms
>
> ### ** Examples
>
> paste0("var", 1:3) %>% iterms(2)
[1] "var1:var2" "var1:var3" "var2:var3"
> paste0("var", 1:3) %>% iterms(3)
[1] "var1:var2"      "var1:var3"      "var2:var3"      "var1:var2:var3"
> paste0("var", 1:3) %>% iterms(2, sep = ".")
[1] "var1.var2" "var1.var3" "var2.var3"
>
>
>
> cleanEx()
> nameEx("kmeans_clus")
> ### * kmeans_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: kmeans_clus
> ### Title: K-means cluster analysis
> ### Aliases: kmeans_clus
>
> ### ** Examples
>
> result <- kmeans_clus("shopping", c("v1:v6"))
>
>
>
> cleanEx()
> nameEx("lin_launcher")
> ### * lin_launcher
>
> flush(stderr()); flush(stdout())
>
> ### Name: lin_launcher
> ### Title: Create a launcher and updater for Linux (.sh)
> ### Aliases: lin_launcher
>
> ### ** Examples
>
> if (interactive()) {
+   if (Sys.info()["sysname"] == "Linux") {
+     lin_launcher()
+     fn <- paste0("/home/",Sys.getenv("USER"),"/Desktop/radiant.sh")
+     if (!file.exists(fn))
+       stop("Linux launcher not created")
+     else
+       unlink(fn)
+   }
+ }
>
>
>
> cleanEx()
> nameEx("mac_launcher")
> ### * mac_launcher
>
> flush(stderr()); flush(stdout())
>
> ### Name: mac_launcher
> ### Title: Create a launcher and updater for Mac (.command)
> ### Aliases: mac_launcher
>
> ### ** Examples
>
> if (interactive()) {
+   if (Sys.info()["sysname"] == "Darwin") {
+     mac_launcher()
+     fn <- paste0("/Users/",Sys.getenv("USER"),"/Desktop/radiant.command")
+     if (!file.exists(fn))
+       stop("Mac launcher not created")
+     else
+       unlink(fn)
+   }
+ }
>
>
>
> cleanEx()
> nameEx("make_dt")
> ### * make_dt
>
> flush(stderr()); flush(stdout())
>
> ### Name: make_dt
> ### Title: Make a pivot tabel in DT
> ### Aliases: make_dt
>
> ### ** Examples
>
> pivotr("diamonds", cvars = "cut") %>% make_dt
> pivotr("diamonds", cvars = c("cut","clarity")) %>% make_dt(format = "color_bar")
> ret <-  pivotr("diamonds", cvars = c("cut","clarity"), normalize = "total") %>%
+    make_dt(format = "color_bar", perc = TRUE)
>
>
>
> cleanEx()
> nameEx("make_expl")
> ### * make_expl
>
> flush(stderr()); flush(stdout())
>
> ### Name: make_expl
> ### Title: Make a tabel of summary statistics in DT
> ### Aliases: make_expl
>
> ### ** Examples
>
> tab <- explore("diamonds", "price:x") %>% make_expl
> tab <- explore("diamonds", "price", byvar = "cut", fun = c("length", "skew")) %>%
+   make_expl(top = "byvar")
>
>
>
> cleanEx()
> nameEx("make_funs")
> ### * make_funs
>
> flush(stderr()); flush(stdout())
>
> ### Name: make_funs
> ### Title: Make a list of functions-as-formulas to pass to dplyr
> ### Aliases: make_funs
>
> ### ** Examples
>
> make_funs(c("mean", "sum_rm"))
<fun_calls>
$ mean: mean(.)
$ sum : sum_rm(.)
>
>
>
> cleanEx()
> nameEx("max_rm")
> ### * max_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: max_rm
> ### Title: Max with na.rm = TRUE
> ### Aliases: max_rm
>
> ### ** Examples
>
> max_rm(runif (100))
[1] 0.9919061
>
>
>
> cleanEx()
> nameEx("mds")
> ### * mds
>
> flush(stderr()); flush(stdout())
>
> ### Name: mds
> ### Title: (Dis)similarity based brand maps (MDS)
> ### Aliases: mds
>
> ### ** Examples
>
> result <- mds("city", "from", "to", "distance")
> summary(result)
(Dis)similarity based brand map (MDS)
Data        : city
Variables   : from, to, distance
# dimensions: 2
Method      : Metric
Observations: 45

Original distance data:
        Boston   NY   DC Miami Chicago Seattle   SF   LA
NY         206
DC         429  233
Miami     1504 1308 1075
Chicago    963  802  671  1329
Seattle   2976 2815 2684  3273    2013
SF        3095 2934 2799  3053    2142     808
LA        2979 2786 2631  2687    2054    1131  379
Denver    1949 1771 1616  2037     996    1307 1235 1059

Recovered distance data:
        Boston     NY     DC  Miami Chicago Seattle     SF     LA
NY       216.2
DC       424.3  209.3
Miami   1481.0 1320.5 1159.8
Chicago  964.2  781.6  649.7 1431.6
Seattle 2950.1 2814.8 2720.0 3271.4  2077.3
SF      3103.3 2929.1 2787.1 3054.3  2147.6   777.6
LA      2993.0 2800.5 2634.9 2728.9  2030.3  1207.1  488.2
Denver  1930.7 1750.8 1606.5 2015.2   969.3  1256.5 1180.7 1089.0

Coordinates:
          Dim  1  Dim  2
Boston  -1348.67 -462.40
NY      -1198.87 -306.55
DC      -1076.99 -136.43
Miami   -1226.94 1013.63
Chicago  -428.45 -174.60
Seattle  1596.16 -639.31
SF       1697.23  131.69
LA       1464.05  560.58
Denver    522.49   13.40

Stress: 0.02> result <- mds("diamonds", "clarity", "cut", "price")
> summary(result)
Number of observations and unique IDs for the brand variable do not match.
Please choose another brand variable or another dataset.>
>
>
> cleanEx()
> nameEx("mean_rm")
> ### * mean_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: mean_rm
> ### Title: Mean with na.rm = TRUE
> ### Aliases: mean_rm
>
> ### ** Examples
>
> mean_rm(runif (100))
[1] 0.5178471
>
>
>
> cleanEx()
> nameEx("median_rm")
> ### * median_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: median_rm
> ### Title: Median with na.rm = TRUE
> ### Aliases: median_rm
>
> ### ** Examples
>
> median_rm(runif (100))
[1] 0.4878107
>
>
>
> cleanEx()
> nameEx("min_rm")
> ### * min_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: min_rm
> ### Title: Min with na.rm = TRUE
> ### Aliases: min_rm
>
> ### ** Examples
>
> min_rm(runif (100))
[1] 0.01339033
>
>
>
> cleanEx()
> nameEx("n_missing")
> ### * n_missing
>
> flush(stderr()); flush(stdout())
>
> ### Name: n_missing
> ### Title: Number of missing values
> ### Aliases: n_missing
>
> ### ** Examples
>
> n_missing(c("a","b",NA))
[1] 1
>
>
>
> cleanEx()
> nameEx("p25")
> ### * p25
>
> flush(stderr()); flush(stdout())
>
> ### Name: p25
> ### Title: 25th percentile
> ### Aliases: p25
>
> ### ** Examples
>
> p25(rnorm(100))
       25%
-0.4942425
>
>
>
> cleanEx()
> nameEx("p75")
> ### * p75
>
> flush(stderr()); flush(stdout())
>
> ### Name: p75
> ### Title: 75th percentile
> ### Aliases: p75
>
> ### ** Examples
>
> p75(rnorm(100))
      75%
0.6915454
>
>
>
> cleanEx()
> nameEx("pivotr")
> ### * pivotr
>
> flush(stderr()); flush(stdout())
>
> ### Name: pivotr
> ### Title: Create a pivot table using dplyr
> ### Aliases: pivotr
>
> ### ** Examples
>
> result <- pivotr("diamonds", cvars = "cut")$tab
> result <- pivotr("diamonds", cvars = c("cut","clarity","color"))$tab
> result <- pivotr("diamonds", cvars = "cut:clarity", nvar = "price")$tab
>
>
>
> cleanEx()
> nameEx("plot.compare_means")
> ### * plot.compare_means
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.compare_means
> ### Title: Plot method for the compare_means function
> ### Aliases: plot.compare_means
>
> ### ** Examples
>
> result <- compare_means("diamonds","cut","price")
> plot(result, plots = c("bar","density"))
>
>
>
> cleanEx()
> nameEx("plot.compare_props")
> ### * plot.compare_props
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.compare_props
> ### Title: Plot method for the compare_props function
> ### Aliases: plot.compare_props
>
> ### ** Examples
>
> result <- compare_props("titanic", "pclass", "survived")
> plot(result, plots = c("props","counts"))
>
>
>
> cleanEx()
> nameEx("plot.conjoint")
> ### * plot.conjoint
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.conjoint
> ### Title: Plot method for the conjoint function
> ### Aliases: plot.conjoint
>
> ### ** Examples
>
> result <- conjoint(dataset = "mp3", dep_var = "Rating", indep_var = "Memory:Shape")
> plot(result, scale_plot = TRUE)
> plot(result, plots = "iw")
>
>
>
> cleanEx()
> nameEx("plot.correlation_")
> ### * plot.correlation_
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.correlation_
> ### Title: Plot method for the correlation function
> ### Aliases: plot.correlation_
>
> ### ** Examples
>
> result <- correlation("diamonds",c("price","carat","clarity"))
> plot(result)
> diamonds %>% correlation("price:clarity") %>% plot
>
>
>
> cleanEx()
> nameEx("plot.cross_tabs")
> ### * plot.cross_tabs
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.cross_tabs
> ### Title: Plot method for the cross_tabs function
> ### Aliases: plot.cross_tabs
>
> ### ** Examples
>
> result <- cross_tabs("newspaper", "Income", "Newspaper")
> plot(result, check = c("observed","expected","chi_sq"))
> newspaper %>% cross_tabs("Income", "Newspaper") %>% plot(c("observed","expected"))
>
>
>
> cleanEx()
> nameEx("plot.full_factor")
> ### * plot.full_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.full_factor
> ### Title: Plot method for the full_factor function
> ### Aliases: plot.full_factor
>
> ### ** Examples
>
> result <- full_factor("diamonds",c("price","carat","table"))
> plot(result)
> result <- full_factor("computer","high_end:business")
> summary(result)
Data should have more observations than variables.
Please reduce the number of variables.>
>
>
> cleanEx()
> nameEx("plot.glm_predict")
> ### * plot.glm_predict
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.glm_predict
> ### Title: Plot method for the predict.glm_reg function
> ### Aliases: plot.glm_predict
>
> ### ** Examples
>
> result <- glm_reg("titanic", "survived", c("pclass","sex","age"), lev = "Yes")
> pred <- predict(result, pred_cmd = "pclass = levels(pclass)")
Predicted values for:
      age  sex pclass Prediction  std.error
 29.88113 male    1st  0.4991301 0.04145468
 29.88113 male    2nd  0.2168618 0.02811439
 29.88113 male    3rd  0.0916927 0.01297580
> plot(pred, xvar = "pclass")
> pred <- predict(result, pred_cmd = "age = 0:100")
Predicted values for:
 pclass  sex age  Prediction   std.error
    3rd male   0 0.220040356 0.034816651
    3rd male   1 0.214194565 0.033423472
    3rd male   2 0.208462568 0.032076689
    3rd male   3 0.202844369 0.030777154
    3rd male   4 0.197339833 0.029525593
    3rd male   5 0.191948705 0.028322611
    3rd male   6 0.186670605 0.027168690
    3rd male   7 0.181505039 0.026064181
    3rd male   8 0.176451403 0.025009312
    3rd male   9 0.171508992 0.024004175
    3rd male  10 0.166676999 0.023048727
    3rd male  11 0.161954529 0.022142784
    3rd male  12 0.157340597 0.021286012
    3rd male  13 0.152834140 0.020477928
    3rd male  14 0.148434019 0.019717885
    3rd male  15 0.144139024 0.019005075
    3rd male  16 0.139947882 0.018338522
    3rd male  17 0.135859262 0.017717076
    3rd male  18 0.131871776 0.017139419
    3rd male  19 0.127983991 0.016604065
    3rd male  20 0.124194426 0.016109366
    3rd male  21 0.120501563 0.015653525
    3rd male  22 0.116903849 0.015234608
    3rd male  23 0.113399699 0.014850565
    3rd male  24 0.109987503 0.014499249
    3rd male  25 0.106665628 0.014178441
    3rd male  26 0.103432421 0.013885877
    3rd male  27 0.100286215 0.013619276
    3rd male  28 0.097225333 0.013376365
    3rd male  29 0.094248088 0.013154902
    3rd male  30 0.091352786 0.012952708
    3rd male  31 0.088537734 0.012767678
    3rd male  32 0.085801236 0.012597803
    3rd male  33 0.083141603 0.012441186
    3rd male  34 0.080557147 0.012296048
    3rd male  35 0.078046190 0.012160736
    3rd male  36 0.075607064 0.012033732
    3rd male  37 0.073238110 0.011913644
    3rd male  38 0.070937686 0.011799216
    3rd male  39 0.068704162 0.011689315
    3rd male  40 0.066535925 0.011582932
    3rd male  41 0.064431382 0.011479174
    3rd male  42 0.062388957 0.011377257
    3rd male  43 0.060407095 0.011276498
    3rd male  44 0.058484262 0.011176310
    3rd male  45 0.056618947 0.011076190
    3rd male  46 0.054809662 0.010975717
    3rd male  47 0.053054942 0.010874537
    3rd male  48 0.051353346 0.010772365
    3rd male  49 0.049703461 0.010668970
    3rd male  50 0.048103895 0.010564176
    3rd male  51 0.046553284 0.010457849
    3rd male  52 0.045050292 0.010349897
    3rd male  53 0.043593605 0.010240264
    3rd male  54 0.042181940 0.010128924
    3rd male  55 0.040814037 0.010015877
    3rd male  56 0.039488664 0.009901146
    3rd male  57 0.038204617 0.009784776
    3rd male  58 0.036960715 0.009666826
    3rd male  59 0.035755809 0.009547369
    3rd male  60 0.034588771 0.009426491
    3rd male  61 0.033458503 0.009304287
    3rd male  62 0.032363930 0.009180858
    3rd male  63 0.031304006 0.009056312
    3rd male  64 0.030277708 0.008930762
    3rd male  65 0.029284041 0.008804321
    3rd male  66 0.028322031 0.008677108
    3rd male  67 0.027390733 0.008549239
    3rd male  68 0.026489223 0.008420833
    3rd male  69 0.025616604 0.008292005
    3rd male  70 0.024771998 0.008162871
    3rd male  71 0.023954556 0.008033544
    3rd male  72 0.023163448 0.007904135
    3rd male  73 0.022397866 0.007774752
    3rd male  74 0.021657028 0.007645500
    3rd male  75 0.020940168 0.007516480
    3rd male  76 0.020246546 0.007387789
    3rd male  77 0.019575440 0.007259522
    3rd male  78 0.018926149 0.007131767
    3rd male  79 0.018297993 0.007004612
    3rd male  80 0.017690309 0.006878138
    3rd male  81 0.017102454 0.006752422
    3rd male  82 0.016533806 0.006627538
    3rd male  83 0.015983757 0.006503556
    3rd male  84 0.015451720 0.006380541
    3rd male  85 0.014937124 0.006258554
    3rd male  86 0.014439414 0.006137654
    3rd male  87 0.013958053 0.006017892
    3rd male  88 0.013492519 0.005899321
    3rd male  89 0.013042306 0.005781985
    3rd male  90 0.012606924 0.005665928
    3rd male  91 0.012185897 0.005551188
    3rd male  92 0.011778763 0.005437802
    3rd male  93 0.011385074 0.005325803
    3rd male  94 0.011004398 0.005215219
    3rd male  95 0.010636313 0.005106077
    3rd male  96 0.010280411 0.004998402
    3rd male  97 0.009936300 0.004892213
    3rd male  98 0.009603594 0.004787530
    3rd male  99 0.009281925 0.004684367
    3rd male 100 0.008970932 0.004582738
> plot(pred, xvar = "age")
> pred <- predict(result, pred_cmd = "pclass = levels(pclass), sex = levels(sex)")
Predicted values for:
      age pclass    sex Prediction  std.error
 29.88113    1st female  0.9237459 0.01447867
 29.88113    2nd female  0.7709698 0.03204065
 29.88113    3rd female  0.5509982 0.03735099
 29.88113    1st   male  0.4991301 0.04145468
 29.88113    2nd   male  0.2168618 0.02811439
 29.88113    3rd   male  0.0916927 0.01297580
> plot(pred, xvar = "pclass", color = "sex")
> pred <- predict(result, pred_cmd = "pclass = levels(pclass), age = seq(0,100,20)")
Predicted values for:
  sex pclass age  Prediction   std.error
 male    1st   0 0.735795605 0.057596963
 male    2nd   0 0.436263532 0.059464638
 male    3rd   0 0.220040356 0.034816651
 male    1st  20 0.583307202 0.048313554
 male    2nd  20 0.280051733 0.034778041
 male    3rd  20 0.124194426 0.016109366
 male    1st  40 0.413018749 0.037009309
 male    2nd  40 0.163547040 0.024892281
 male    3rd  40 0.066535925 0.011582932
 male    1st  60 0.261272631 0.038195959
 male    2nd  60 0.089485417 0.021329834
 male    3rd  60 0.034588771 0.009426491
 male    1st  80 0.150942348 0.037820417
 male    2nd  80 0.047074788 0.016544314
 male    3rd  80 0.017690309 0.006878138
 male    1st 100 0.082028941 0.030779005
 male    2nd 100 0.024229335 0.011474982
 male    3rd 100 0.008970932 0.004582738
> plot(pred, xvar = "pclass", color = "age")
> plot(pred, xvar = "age", color = "pclass")
> pred <- predict(result, pred_cmd="pclass=levels(pclass), sex=levels(sex), age=seq(0,100,20)")
Predicted values for:
 pclass    sex age  Prediction   std.error
    1st female   0 0.971309358 0.009104370
    2nd female   0 0.903915188 0.022678657
    3rd female   0 0.774240706 0.036611999
    1st   male   0 0.735795605 0.057596963
    2nd   male   0 0.436263532 0.059464638
    3rd   male   0 0.220040356 0.034816651
    1st female  20 0.944496683 0.012366942
    2nd female  20 0.825438790 0.027589922
    3rd female  20 0.632869958 0.034339361
    1st   male  20 0.583307202 0.048313554
    2nd   male  20 0.280051733 0.034778041
    3rd   male  20 0.124194426 0.016109366
    1st female  40 0.895326716 0.017937949
    2nd female  40 0.703865812 0.040207904
    3rd female  40 0.464232255 0.044407579
    1st   male  40 0.413018749 0.037009309
    2nd   male  40 0.163547040 0.024892281
    3rd   male  40 0.066535925 0.011582932
    1st female  60 0.811300109 0.034124486
    2nd female  60 0.544360658 0.065539971
    3rd female  60 0.303395540 0.057483966
    1st   male  60 0.261272631 0.038195959
    2nd   male  60 0.089485417 0.021329834
    3rd   male  60 0.034588771 0.009426491
    1st female  80 0.683654033 0.066588758
    2nd female  80 0.375204263 0.085973997
    3rd female  80 0.179602189 0.056712281
    1st   male  80 0.150942348 0.037820417
    2nd   male  80 0.047074788 0.016544314
    3rd   male  80 0.017690309 0.006878138
    1st female 100 0.520675934 0.103498443
    2nd female 100 0.231863465 0.085645552
    3rd female 100 0.099131716 0.045041220
    1st   male 100 0.082028941 0.030779005
    2nd   male 100 0.024229335 0.011474982
    3rd   male 100 0.008970932 0.004582738
> plot(pred, xvar = "age", color = "sex", facet_col = "pclass")
> plot(pred, xvar = "age", color = "pclass", facet_col = "sex")
> pred <- predict(result, pred_cmd="pclass=levels(pclass), sex=levels(sex), age=seq(0,100,5)")
Predicted values for:
 pclass    sex age  Prediction   std.error
    1st female   0 0.971309358 0.009104370
    2nd female   0 0.903915188 0.022678657
    3rd female   0 0.774240706 0.036611999
    1st   male   0 0.735795605 0.057596963
    2nd   male   0 0.436263532 0.059464638
    3rd   male   0 0.220040356 0.034816651
    1st female   5 0.966108368 0.009875027
    2nd female   5 0.887906999 0.023823704
    3rd female   5 0.742776016 0.035927322
    1st   male   5 0.701041683 0.056512585
    2nd   male   5 0.394530785 0.052486505
    3rd   male   5 0.191948705 0.028322611
    1st female  10 0.960003374 0.010667521
    2nd female  10 0.869616473 0.024948187
    3rd female  10 0.708576635 0.035074052
    1st   male  10 0.663804989 0.054499582
    2nd   male  10 0.354281306 0.045809762
    3rd   male  10 0.166676999 0.023048727
    1st female  15 0.952852339 0.011490288
    2nd female  15 0.848849492 0.026149207
    3rd female  15 0.671839134 0.034399648
    1st   male  15 0.624415113 0.051686261
    2nd   male  15 0.315994996 0.039810042
    3rd   male  15 0.144139024 0.019005075
    1st female  20 0.944496683 0.012366942
    2nd female  20 0.825438790 0.027589922
    3rd female  20 0.632869958 0.034339361
    1st   male  20 0.583307202 0.048313554
    2nd   male  20 0.280051733 0.034778041
    3rd   male  20 0.124194426 0.016109366
    1st female  25 0.934761598 0.013345585
    2nd female  25 0.799259637 0.029494704
    3rd female  25 0.592082898 0.035286623
    1st   male  25 0.541007326 0.044733663
    2nd   male  25 0.246722184 0.030868050
    3rd   male  25 0.106665628 0.014178441
    1st female  30 0.923457390 0.014509360
    2nd female  30 0.770247163 0.032112926
    3rd female  30 0.549986594 0.037414806
    1st   male  30 0.498108114 0.041381115
    2nd   male  30 0.216168256 0.028059220
    3rd   male  30 0.091352786 0.012952708
    1st female  35 0.910382231 0.015984323
    2nd female  35 0.738413933 0.035652166
    3rd female  35 0.507162104 0.040583496
    1st   male  35 0.455236737 0.038698240
    2nd   male  35 0.188451500 0.026162932
    3rd   male  35 0.078046190 0.012160736
    1st female  40 0.895326716 0.017937949
    2nd female  40 0.703865812 0.040207904
    3rd female  40 0.464232255 0.044407579
    1st   male  40 0.413018749 0.037009309
    2nd   male  40 0.163547040 0.024892281
    3rd   male  40 0.066535925 0.011582932
    1st female  45 0.878080643 0.020562460
    2nd female  45 0.666813696 0.045725307
    3rd female  45 0.421826005 0.048408612
    1st   male  45 0.372042115 0.036390949
    2nd   male  45 0.141360502 0.023957762
    3rd   male  45 0.056618947 0.011076190
    1st female  50 0.858442350 0.024044967
    2nd female  50 0.627578557 0.052004688
    3rd female  50 0.380542062 0.052138305
    1st   male  50 0.332825745 0.036639082
    2nd   male  50 0.121745679 0.023134379
    3rd   male  50 0.048103895 0.010564176
    1st female  55 0.836230770 0.028535603
    2nd female  55 0.586587649 0.058735476
    3rd female  55 0.340916143 0.055242731
    1st   male  55 0.295795939 0.037373790
    2nd   male  55 0.104521250 0.022281249
    3rd   male  55 0.040814037 0.010015877
    1st female  60 0.811300109 0.034124486
    2nd female  60 0.544360658 0.065539971
    3rd female  60 0.303395540 0.057483966
    1st   male  60 0.261272631 0.038195959
    2nd   male  60 0.089485417 0.021329834
    3rd   male  60 0.034588771 0.009426491
    1st female  65 0.783556564 0.040829070
    2nd female  65 0.501486063 0.072017559
    3rd female  65 0.268323222 0.058738260
    1st   male  65 0.229465691 0.038793116
    2nd   male  65 0.076427946 0.020261989
    3rd   male  65 0.029284041 0.008804321
    1st female  70 0.752975999 0.048587053
    2nd female  70 0.458589602 0.077786300
    3rd female  70 0.235932083 0.058981708
    1st   male  70 0.200480039 0.038972433
    2nd   male  70 0.065139478 0.019089630
    3rd   male  70 0.024771998 0.008162871
    1st female  75 0.719620853 0.057251457
    2nd female  75 0.416298289 0.082519507
    3rd female  75 0.206348353 0.058269416
    1st   male  75 0.174327431 0.038649358
    2nd   male  75 0.055418280 0.017839695
    3rd   male  75 0.020940168 0.007516480
    1st female  80 0.683654033 0.066588758
    2nd female  80 0.375204263 0.085973997
    3rd female  80 0.179602189 0.056712281
    1st   male  80 0.150942348 0.037820417
    2nd   male  80 0.047074788 0.016544314
    3rd   male  80 0.017690309 0.006878138
    1st female  85 0.645347247 0.076283414
    2nd female  85 0.335832835 0.088006849
    3rd female  85 0.155642908 0.054454538
    1st   male  85 0.130199580 0.036535107
    2nd   male  85 0.039934342 0.015234970
    3rd   male  85 0.014937124 0.006258554
    1st female  90 0.605081378 0.085952022
    2nd female  90 0.298618211 0.088579119
    3rd female  90 0.134356398 0.051654295
    1st   male  90 0.111931537 0.034872443
    2nd   male  90 0.033838521 0.013939403
    3rd   male  90 0.012606924 0.005665928
    1st female  95 0.563337193 0.095168441
    2nd female  95 0.263888943 0.087747322
    3rd female  95 0.115582623 0.048468291
    1st   male  95 0.095943916 0.032923426
    2nd   male  95 0.028645439 0.012680291
    3rd   male  95 0.010636313 0.005106077
    1st female 100 0.520675934 0.103498443
    2nd female 100 0.231863465 0.085645552
    3rd female 100 0.099131716 0.045041220
    1st   male 100 0.082028941 0.030779005
    2nd   male 100 0.024229335 0.011474982
    3rd   male 100 0.008970932 0.004582738
> plot(pred, xvar = "age", color = "sex", facet_col = "pclass")
> plot(pred, xvar = "age", color = "pclass", facet_col = "sex")
>
>
>
> cleanEx()
> nameEx("plot.glm_reg")
> ### * plot.glm_reg
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.glm_reg
> ### Title: Plot method for the glm_reg function
> ### Aliases: plot.glm_reg
>
> ### ** Examples
>
> result <- glm_reg("titanic", "survived", c("pclass","sex"), lev = "Yes")
> plot(result, plots = "coef")
Waiting for profiling to be done...
>
>
>
> cleanEx()
> nameEx("plot.hier_clus")
> ### * plot.hier_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.hier_clus
> ### Title: Plot method for the hier_clus function
> ### Aliases: plot.hier_clus
>
> ### ** Examples
>
> result <- hier_clus("shopping", vars = c("v1:v6"))
> plot(result, plots = c("diff", "scree"), cutoff = .05)
> plot(result, plots = "dendro", cutoff = 0)
> shopping %>% hier_clus(vars = c("v1:v6")) %>% plot
>
>
>
> cleanEx()
> nameEx("plot.kmeans_clus")
> ### * plot.kmeans_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.kmeans_clus
> ### Title: Plot method for kmeans_clus
> ### Aliases: plot.kmeans_clus
>
> ### ** Examples
>
> result <- kmeans_clus("shopping", vars = c("v1:v6"))
> plot(result)
>
>
>
> cleanEx()
> nameEx("plot.mds")
> ### * plot.mds
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.mds
> ### Title: Plot method for the mds function
> ### Aliases: plot.mds
>
> ### ** Examples
>
> result <- mds("city","from","to","distance")
> plot(result)
> plot(result, rev_dim = 1:2)
> plot(result, rev_dim = 1:2, fontsz = 2)
>
>
>
> cleanEx()
> nameEx("plot.pmap")
> ### * plot.pmap
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.pmap
> ### Title: Plot method for the pmap function
> ### Aliases: plot.pmap
>
> ### ** Examples
>
> result <- pmap("computer", "brand", "high_end:business")
> plot(result, plots = "brand")
> plot(result, plots = c("brand", "attr"))
> plot(result, plots = c("brand", "attr"))
> plot(result, scaling = 1, plots = c("brand", "attr"))
> result <- pmap("computer", "brand", "high_end:dated",
+                pref = c("innovative", "business"))
> plot(result, plots = c("brand", "attr", "pref"))
>
>
>
> cleanEx()
> nameEx("plot.pre_factor")
> ### * plot.pre_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.pre_factor
> ### Title: Plot method for the pre_factor function
> ### Aliases: plot.pre_factor
>
> ### ** Examples
>
> result <- pre_factor("diamonds",c("price","carat","table"))
> plot(result)
>
>
>
> cleanEx()
> nameEx("plot.reg_predict")
> ### * plot.reg_predict
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.reg_predict
> ### Title: Plot method for the predict.regression function
> ### Aliases: plot.reg_predict
>
> ### ** Examples
>
> result <- regression("diamonds", "price", c("carat","clarity"))
> pred <- predict(result, pred_cmd = "carat = 1:10")
Predicted values for:
 clarity carat Prediction      2.5%     97.5%      +/-
     SI1     1   5265.569  2859.633  7671.505 2405.936
     SI1     2  13703.599 11294.952 16112.246 2408.647
     SI1     3  22141.629 19726.114 24557.145 2415.515
     SI1     4  30579.660 28153.155 33006.165 2426.505
     SI1     5  39017.690 36576.130 41459.250 2441.560
     SI1     6  47455.720 44995.114 49916.327 2460.607
     SI1     7  55893.751 53410.198 58377.303 2483.552
     SI1     8  64331.781 61821.491 66842.072 2510.291
     SI1     9  72769.811 70229.110 75310.513 2540.701
     SI1    10  81207.842 78633.187 83782.496 2574.655
> plot(pred, xvar = "carat")
> result <- regression("diamonds", "price", c("carat","clarity"), int_var = "carat:clarity")
> dpred <<- getdata("diamonds") %>% slice(1:100)
> pred <- predict(result, pred_data = "dpred")
Predicted values for profiles from dataset:
 carat clarity   Prediction       2.5%     97.5%      +/-
  0.32     VS1   240.945939 -2069.1374  2551.029 2310.083
  0.34     SI1  -119.579762 -2428.2871  2189.128 2308.707
  0.30     VS2    -1.680854 -2310.3109  2306.949 2308.630
  0.35    VVS2   854.442739 -1456.4678  3165.353 2310.911
  0.40     VS2   842.564277 -1465.3526  3150.481 2307.917
  0.60    VVS1  3450.421047  1139.8097  5761.032 2310.611
  0.88     SI1  4242.126290  1935.4504  6548.802 2306.676
  0.93     SI1  4645.987961  2339.2688  6952.707 2306.719
  0.51    VVS2  2485.146235   175.8103  4794.482 2309.336
  1.01     SI2  4563.100403  2255.8166  6870.384 2307.284
  0.30    VVS2   344.847897 -1966.8699  2656.566 2311.718
  2.01     VS2 14434.910885 12114.1509 16755.671 2320.760
  0.30    VVS2   344.847897 -1966.8699  2656.566 2311.718
  1.00     VS2  5908.035062  3600.6814  8215.389 2307.354
  0.32     VS1   240.945939 -2069.1374  2551.029 2310.083
  1.01     SI2  4563.100403  2255.8166  6870.384 2307.284
  0.81     SI2  2967.369504   659.5626  5275.176 2307.807
  0.40     SI1   365.054244 -1943.2017  2673.310 2308.256
  0.31    VVS1   511.474178 -1801.2231  2824.171 2312.697
  0.40    VVS2  1364.037582  -946.2156  3674.291 2310.253
  0.31     SI1  -361.896765 -2670.8510  1947.057 2308.954
  1.04     VS2  6245.733115  3938.1904  8553.276 2307.543
  1.21     VS2  7680.949837  5372.2880  9989.612 2308.662
  1.04    VVS2  7886.851566  5571.7417 10201.961 2315.110
  0.68    VVS1  4261.165011  1949.4096  6572.920 2311.755
  0.33     SI1  -200.352096 -2509.1402  2108.436 2308.788
  0.55     SI2   892.919335 -1416.5014  3202.340 2309.421
  1.14     SI2  5600.325488  3293.0464  7907.605 2307.279
  2.02     SI1 13450.172398 11132.7852 15767.560 2317.387
  0.59      IF  3790.411233  1471.2979  6109.525 2319.113
  0.30     SI1  -442.669099 -2751.7087  1866.371 2309.040
  1.22     VS1  8147.555313  5836.2485 10458.862 2311.307
  0.30     VS2    -1.680854 -2310.3109  2306.949 2308.630
  0.90     SI1  4403.670958  2096.9825  6710.359 2306.688
  0.61    VVS2  3504.335920  1195.2025  5813.469 2309.133
  0.34     VS2   336.017198 -1972.3063  2644.341 2308.324
  2.06     SI2 12940.687625 10625.9039 15255.471 2314.784
  2.32     SI1 15873.342426 13549.7774 18196.907 2323.565
  0.31     VS2    82.743659 -2225.8071  2391.294 2308.551
  0.30     VS1    65.243508 -2245.0840  2375.571 2310.327
  0.50     SI1  1172.777587 -1134.8512  3480.406 2307.629
  0.38     VS2   673.715251 -1634.3301  2981.761 2308.045
  1.03     SI1  5453.711304  3146.7880  7760.635 2306.923
  0.50     VS2  1686.809408  -620.5711  3994.190 2307.380
  0.71     SI1  2868.996607   562.1744  5175.819 2306.822
  0.33     VS1   328.797154 -1981.1686  2638.763 2309.966
  1.50     VS2 10129.260717  7817.5123 12441.009 2311.748
  1.11     SI2  5360.965853  3053.7091  7668.223 2307.257
  0.91     VS1  5424.167640  3115.9796  7732.356 2308.188
  0.30    VVS1   410.131183 -1902.8121  2723.075 2312.943
  0.38      IF  1465.717840  -852.1098  3783.545 2317.828
  0.41      IF  1797.816896  -519.3483  4114.982 2317.165
  1.50     VS2 10129.260717  7817.5123 12441.009 2311.748
  0.35     VS2   420.441711 -1887.8096  2728.693 2308.251
  1.07     VS2  6499.006654  4191.3036  8806.710 2307.703
  0.79     SI1  3515.175281  1208.4785  5821.872 2306.697
  0.71     SI2  2169.504054  -138.7987  4477.807 2308.303
  0.57     SI2  1052.492425 -1256.7667  3361.752 2309.259
  0.41     SI1   445.826578 -1862.3596  2754.013 2308.186
  0.83    VVS1  5781.309943  3465.4100  8097.210 2315.900
  0.51     VS1  1910.119029  -398.2330  4218.471 2308.352
  1.68     VS2 11648.901953  9334.4931 13963.311 2314.409
  0.30    VVS1   410.131183 -1902.8121  2723.075 2312.943
  1.30     VS2  8440.770455  6131.3094 10750.231 2309.461
  1.74     VS1 12715.818508 10392.9520 15038.685 2322.866
  0.26    VVS2   -62.827977 -2375.2996  2249.644 2312.472
  0.23    VVS1  -299.269786 -2614.2595  2015.720 2314.990
  0.70     VS2  3375.299670  1068.4611  5682.138 2306.839
  1.50     VS2 10129.260717  7817.5123 12441.009 2311.748
  1.01     SI2  4563.100403  2255.8166  6870.384 2307.284
  0.51     VS1  1910.119029  -398.2330  4218.471 2308.352
  1.00     SI2  4483.313858  2176.0187  6790.609 2307.295
  1.01     SI1  5292.166635  2985.2967  7599.037 2306.870
  0.46     VS1  1470.862953  -837.8415  3779.567 2308.704
  0.34     VS2   336.017198 -1972.3063  2644.341 2308.324
  0.43     VS2  1095.837816 -1211.8995  3403.575 2307.737
  0.31     VS2    82.743659 -2225.8071  2391.294 2308.551
  0.30     SI2 -1101.744289 -3413.7104  1210.222 2311.966
  1.21     SI1  6907.613321  4599.9271  9215.300 2307.686
  1.01     VS1  6302.679793  3993.7950  8611.565 2308.885
  0.71     VS2  3459.724183  1152.8941  5766.554 2306.830
  1.00     VS1  6214.828577  3906.0268  8523.630 2308.802
  0.88    VVS1  6288.024921  3970.1658  8605.884 2317.859
  0.31      IF   690.820043 -1629.6481  3011.288 2320.468
  0.36     VS1   592.350800 -1717.2797  2901.981 2309.631
  0.77     SI2  2648.223324   340.2369  4956.210 2307.986
  1.02     SI2  4642.886948  2335.6128  6950.161 2307.274
  0.63    VVS2  3708.173857  1399.0087  6017.339 2309.165
  1.01     SI1  5292.166635  2985.2967  7599.037 2306.870
  0.43    VVS1  1727.590124  -583.0592  4038.239 2310.649
  0.38     VS1   768.053230 -1541.3685  3077.475 2309.422
  1.01    VVS1  7605.483862  5281.1865  9929.781 2324.297
  0.73     VS2  3628.573209  1321.7548  5935.392 2306.818
  0.40     VS1   943.755661 -1365.4691  3252.980 2309.225
  1.04     SI1  5534.483638  3227.5312  7841.436 2306.952
  1.39     VS1  9641.025973  7326.8093 11955.243 2314.217
  1.08     VS2  6583.431167  4275.6711  8891.191 2307.760
  0.90     SI2  3685.448409  1377.9543  5992.943 2307.494
  0.54     VS1  2173.672675  -134.5032  4481.849 2308.176
  1.28      IF 11428.689524  9010.2432 13847.136 2418.446
> plot(pred, xvar = "carat", color = "clarity")
> rm(dpred, envir = .GlobalEnv)
>
>
>
> cleanEx()
> nameEx("plot.regression")
> ### * plot.regression
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.regression
> ### Title: Plot method for the regression function
> ### Aliases: plot.regression
>
> ### ** Examples
>
> result <- regression("diamonds", "price", c("carat","clarity"))
> plot(result, plots = "dashboard")
stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
> plot(result, plots = "dashboard", lines = c("line","loess"))
geom_smooth: method="auto" and size of largest group is >=1000, so using gam with formula: y ~ s(x, bs = "cs"). Use 'method = x' to change the smoothing method.
geom_smooth: method="auto" and size of largest group is >=1000, so using gam with formula: y ~ s(x, bs = "cs"). Use 'method = x' to change the smoothing method.
geom_smooth: method="auto" and size of largest group is >=1000, so using gam with formula: y ~ s(x, bs = "cs"). Use 'method = x' to change the smoothing method.
stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
> plot(result, plots = "coef", intercept = TRUE)
> plot(result, plots = "coef", conf_lev = .99, intercept = TRUE)
> plot(result, plots = "hist")
stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
stat_bin: binwidth defaulted to range/30. Use 'binwidth = x' to adjust this.
> plot(result, plots = "scatter", lines = c("line","loess"))
geom_smooth: method="auto" and size of largest group is >=1000, so using gam with formula: y ~ s(x, bs = "cs"). Use 'method = x' to change the smoothing method.
> plot(result, plots = "correlations")
> plot(result, plots = "leverage")
> plot(result, plots = "resid_pred", lines = "line")
>
>
>
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("plot.simulater")
> ### * plot.simulater
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.simulater
> ### Title: Plot method for the simulater function
> ### Aliases: plot.simulater
>
> ### ** Examples
>
> result <- simulater(const = "cost 3", norm = "demand 2000 1000",
+                     discrete = "price 5 .3 8 .7",
+                     form = "profit = demand * (price - cost)")
> plot(result)
>
>
>
> cleanEx()
> nameEx("plot.single_mean")
> ### * plot.single_mean
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.single_mean
> ### Title: Plot method for the single_mean function
> ### Aliases: plot.single_mean
>
> ### ** Examples
>
> result <- single_mean("diamonds","price", comp_value = 3500)
> plot(result, plots = c("hist", "simulate"))
>
>
>
> cleanEx()
> nameEx("plot.single_prop")
> ### * plot.single_prop
>
> flush(stderr()); flush(stdout())
>
> ### Name: plot.single_prop
> ### Title: Plot method for the single_prop function
> ### Aliases: plot.single_prop
>
> ### ** Examples
>
> result <- single_prop("diamonds","clarity", lev = "IF", comp_value = 0.05)
> plot(result, plots = c("hist", "simulate"))
> result <- single_prop("titanic","pclass", lev = "1st")
> plot(result, plots = c("hist","simulate"))
>
>
>
> cleanEx()
> nameEx("pmap")
> ### * pmap
>
> flush(stderr()); flush(stdout())
>
> ### Name: pmap
> ### Title: Attribute based brand maps
> ### Aliases: pmap
>
> ### ** Examples
>
> result <- pmap("computer","brand","high_end:business")
>
>
>
> cleanEx()
> nameEx("pre_factor")
> ### * pre_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: pre_factor
> ### Title: Evaluate if data are appropriate for PCA / Factor analysis
> ### Aliases: pre_factor
>
> ### ** Examples
>
> result <- pre_factor("diamonds",c("price","carat","table"))
>
>
>
> cleanEx()
> nameEx("predict.glm_reg")
> ### * predict.glm_reg
>
> flush(stderr()); flush(stdout())
>
> ### Name: predict.glm_reg
> ### Title: Predict method for the glm_reg function
> ### Aliases: predict.glm_reg
>
> ### ** Examples
>
> result <- glm_reg("titanic", "survived", c("pclass","sex"), lev = "Yes")
> predict(result, pred_cmd = "pclass = levels(pclass)")
Predicted values for:
  sex pclass Prediction  std.error
 male    1st  0.3999027 0.03296987
 male    2nd  0.2164129 0.02643573
 male    3rd  0.1063100 0.01204523
   sex pclass Prediction  std.error
1 male    1st  0.3999027 0.03296987
2 male    2nd  0.2164129 0.02643573
3 male    3rd  0.1063100 0.01204523
> glm_reg("titanic", "survived", c("pclass","sex"), lev = "Yes") %>%
+   predict(pred_cmd = "sex = c('male','female')")
Predicted values for:
 pclass    sex Prediction  std.error
    3rd   male  0.1063100 0.01204523
    3rd female  0.5953203 0.02944920
  pclass    sex Prediction  std.error
1    3rd   male  0.1063100 0.01204523
2    3rd female  0.5953203 0.02944920
>
>
>
> cleanEx()
> nameEx("predict.regression")
> ### * predict.regression
>
> flush(stderr()); flush(stdout())
>
> ### Name: predict.regression
> ### Title: Predict method for the regression function
> ### Aliases: predict.regression
>
> ### ** Examples
>
> result <- regression("diamonds", "price", c("carat","clarity"))
> predict(result, pred_cmd = "carat = 1:10")
Predicted values for:
 clarity carat Prediction      2.5%     97.5%      +/-
     SI1     1   5265.569  2859.633  7671.505 2405.936
     SI1     2  13703.599 11294.952 16112.246 2408.647
     SI1     3  22141.629 19726.114 24557.145 2415.515
     SI1     4  30579.660 28153.155 33006.165 2426.505
     SI1     5  39017.690 36576.130 41459.250 2441.560
     SI1     6  47455.720 44995.114 49916.327 2460.607
     SI1     7  55893.751 53410.198 58377.303 2483.552
     SI1     8  64331.781 61821.491 66842.072 2510.291
     SI1     9  72769.811 70229.110 75310.513 2540.701
     SI1    10  81207.842 78633.187 83782.496 2574.655
   clarity carat Prediction      2.5%     97.5%      +/-
1      SI1     1   5265.569  2859.633  7671.505 2405.936
2      SI1     2  13703.599 11294.952 16112.246 2408.647
3      SI1     3  22141.629 19726.114 24557.145 2415.515
4      SI1     4  30579.660 28153.155 33006.165 2426.505
5      SI1     5  39017.690 36576.130 41459.250 2441.560
6      SI1     6  47455.720 44995.114 49916.327 2460.607
7      SI1     7  55893.751 53410.198 58377.303 2483.552
8      SI1     8  64331.781 61821.491 66842.072 2510.291
9      SI1     9  72769.811 70229.110 75310.513 2540.701
10     SI1    10  81207.842 78633.187 83782.496 2574.655
> predict(result, pred_cmd = "clarity = levels(clarity)")
Predicted values for:
     carat clarity Prediction      2.5%    97.5%      +/-
 0.7942833      I1  -78.80608 -2513.424 2355.812 2434.618
 0.7942833     SI2 2711.95343   305.293 5118.614 2406.660
 0.7942833     SI1 3529.72541  1123.830 5935.621 2405.895
 0.7942833     VS2 4171.09972  1765.056 6577.143 2406.044
 0.7942833     VS1 4383.15024  1976.200 6790.101 2406.951
 0.7942833    VVS2 5030.66955  2622.135 7439.205 2408.535
 0.7942833    VVS1 4948.86305  2539.120 7358.606 2409.743
 0.7942833      IF 5186.36425  2769.806 7602.923 2416.559
      carat clarity Prediction      2.5%    97.5%      +/-
1 0.7942833      I1  -78.80608 -2513.424 2355.812 2434.618
2 0.7942833     SI2 2711.95343   305.293 5118.614 2406.660
3 0.7942833     SI1 3529.72541  1123.830 5935.621 2405.895
4 0.7942833     VS2 4171.09972  1765.056 6577.143 2406.044
5 0.7942833     VS1 4383.15024  1976.200 6790.101 2406.951
6 0.7942833    VVS2 5030.66955  2622.135 7439.205 2408.535
7 0.7942833    VVS1 4948.86305  2539.120 7358.606 2409.743
8 0.7942833      IF 5186.36425  2769.806 7602.923 2416.559
> result <- regression("diamonds", "price", c("carat","clarity"), int_var = c("carat:clarity"))
> dpred <<- getdata("diamonds") %>% slice(1:10)
> predict(result, pred_data = "dpred")
Predicted values for profiles from dataset:
 carat clarity  Prediction       2.5%    97.5%      +/-
  0.32     VS1  240.945939 -2069.1374 2551.029 2310.083
  0.34     SI1 -119.579762 -2428.2871 2189.128 2308.707
  0.30     VS2   -1.680854 -2310.3109 2306.949 2308.630
  0.35    VVS2  854.442739 -1456.4678 3165.353 2310.911
  0.40     VS2  842.564277 -1465.3526 3150.481 2307.917
  0.60    VVS1 3450.421047  1139.8097 5761.032 2310.611
  0.88     SI1 4242.126290  1935.4504 6548.802 2306.676
  0.93     SI1 4645.987961  2339.2688 6952.707 2306.719
  0.51    VVS2 2485.146235   175.8103 4794.482 2309.336
  1.01     SI2 4563.100403  2255.8166 6870.384 2307.284
   carat clarity  Prediction       2.5%    97.5%      +/-
1   0.32     VS1  240.945939 -2069.1374 2551.029 2310.083
2   0.34     SI1 -119.579762 -2428.2871 2189.128 2308.707
3   0.30     VS2   -1.680854 -2310.3109 2306.949 2308.630
4   0.35    VVS2  854.442739 -1456.4678 3165.353 2310.911
5   0.40     VS2  842.564277 -1465.3526 3150.481 2307.917
6   0.60    VVS1 3450.421047  1139.8097 5761.032 2310.611
7   0.88     SI1 4242.126290  1935.4504 6548.802 2306.676
8   0.93     SI1 4645.987961  2339.2688 6952.707 2306.719
9   0.51    VVS2 2485.146235   175.8103 4794.482 2309.336
10  1.01     SI2 4563.100403  2255.8166 6870.384 2307.284
> rm(dpred, envir = .GlobalEnv)
>
>
>
> cleanEx()
> nameEx("radiant")
> ### * radiant
>
> flush(stderr()); flush(stdout())
>
> ### Name: radiant
> ### Title: radiant
> ### Aliases: radiant radiant-package
>
> ### ** Examples
>
> if (interactive()) {
+   radiant("base")
+   radiant("quant")
+   radiant("marketing")
+ }
>
>
>
> cleanEx()
> nameEx("regression")
> ### * regression
>
> flush(stderr()); flush(stdout())
>
> ### Name: regression
> ### Title: Linear regression using OLS
> ### Aliases: regression
>
> ### ** Examples
>
> result <- regression("diamonds", "price", c("carat","clarity"))
> result <- regression("diamonds", "price", c("carat","clarity"), check = "standardize")
>
>
>
> cleanEx()
> nameEx("sample_size")
> ### * sample_size
>
> flush(stderr()); flush(stdout())
>
> ### Name: sample_size
> ### Title: Sample size calculation
> ### Aliases: sample_size
>
> ### ** Examples
>
> result <- sample_size(type = "mean", err_mean = 2, sd_mean = 10)
>
>
>
> cleanEx()
> nameEx("sampling")
> ### * sampling
>
> flush(stderr()); flush(stdout())
>
> ### Name: sampling
> ### Title: Simple random sampling
> ### Aliases: sampling
>
> ### ** Examples
>
> result <- sampling("rndnames","Names",10)
>
>
>
> cleanEx()
> nameEx("save_factors")
> ### * save_factors
>
> flush(stderr()); flush(stdout())
>
> ### Name: save_factors
> ### Title: Save factor scores to active dataset
> ### Aliases: save_factors
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("save_glm_resid")
> ### * save_glm_resid
>
> flush(stderr()); flush(stdout())
>
> ### Name: save_glm_resid
> ### Title: Save residuals generated in the glm_reg function
> ### Aliases: save_glm_resid
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("save_membership")
> ### * save_membership
>
> flush(stderr()); flush(stdout())
>
> ### Name: save_membership
> ### Title: Add a cluster membership variable to the active dataset
> ### Aliases: save_membership
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("save_reg_resid")
> ### * save_reg_resid
>
> flush(stderr()); flush(stdout())
>
> ### Name: save_reg_resid
> ### Title: Save regression residuals
> ### Aliases: save_reg_resid
>
> ### ** Examples
>
>
>
>
> cleanEx()
> nameEx("sd_rm")
> ### * sd_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: sd_rm
> ### Title: Standard deviation with na.rm = TRUE
> ### Aliases: sd_rm
>
> ### ** Examples
>
> sd_rm(rnorm(100))
[1] 0.8981994
>
>
>
> cleanEx()
> nameEx("serr")
> ### * serr
>
> flush(stderr()); flush(stdout())
>
> ### Name: serr
> ### Title: Standard error
> ### Aliases: serr
>
> ### ** Examples
>
> serr(rnorm(100))
[1] 0.008981994
>
>
>
> cleanEx()
> nameEx("set_class")
> ### * set_class
>
> flush(stderr()); flush(stdout())
>
> ### Name: set_class
> ### Title: Alias used to set the class for analysis function return
> ### Aliases: set_class
>
> ### ** Examples
>
> foo <- function(x) x^2 %>% set_class(c("foo", class(.)))
>
>
>
> cleanEx()
> nameEx("sig_stars")
> ### * sig_stars
>
> flush(stderr()); flush(stdout())
>
> ### Name: sig_stars
> ### Title: Add stars '***' to a data.frame (from broom's 'tidy' function)
> ###   based on p.values
> ### Aliases: sig_stars
>
> ### ** Examples
>
> sig_stars(c(.0009, .049, .009, .4, .09))
[1] "***" "*"   "**"  ""    "."
>
>
>
> cleanEx()
> nameEx("simulater")
> ### * simulater
>
> flush(stderr()); flush(stdout())
>
> ### Name: simulater
> ### Title: Simulate data for decision analysis
> ### Aliases: simulater
>
> ### ** Examples
>
> result <- simulater(const = "cost 3", norm = "demand 2000 1000",
+                     discrete = "price 5 .3 8 .7",
+                     form = "profit = demand * (price - cost)")
>
>
>
> cleanEx()
> nameEx("single_mean")
> ### * single_mean
>
> flush(stderr()); flush(stdout())
>
> ### Name: single_mean
> ### Title: Compare a sample mean to a population mean
> ### Aliases: single_mean
>
> ### ** Examples
>
> single_mean("diamonds","price")
$res
  estimate statistic p.value parameter conf.low conf.high
1 3907.186  54.08389       0      2999 3765.535  4048.837

$dat
      price
7718    580
27822   650
23018   630
29608   706
39543  1080
1919   3082
3137   3328
7434   4229
47774  1895
4148   3546
31088   752
24661 13003
33028   814
15230  6115
26718   645
5031   3749
1165   2926
31448   765
40454  1140
40700  1158
44318   521
15247  6122
11835  5096
21310  9465
2619   3225
30881   743
42091  1273
5443   3830
26623 16386
47511  1866
29812   709
19535  8167
27989   658
8961   4502
48407  1970
11714   596
26414 15938
27449 18080
32701   802
51963   545
42173  1286
52312   549
11863  5105
47355  1845
50434  2262
28324   666
20699  8974
10871  4877
11672  5057
33195   819
41357  1218
43572  1431
25545 14372
35571   906
19572  8202
1006   2898
46096  1740
41508  1235
29077   688
5177   3774
45209  1656
24955 13427
37028   965
22066 10090
27348 17904
51975   547
29621   439
2102   3115
24258 12468
5119   3761
44956  1636
2505   3199
13130  5433
43071  1378
30409   730
35491   904
36428   942
31952   452
14609  5893
15575  6247
2225   3145
12445  5242
8035   4334
35812   914
36217   932
53789  2729
4513   3633
585    2835
11336  4989
41991  1264
35000   882
20215  8647
4579   3649
32882   810
11853  5102
17923  7239
16971  6777
4613   3662
46440  1772
23412 11401
37801  1000
23169 11182
32554   800
2687   3243
19631  8248
46519  1781
41082  1192
48055  1927
15683  6289
11497  5018
22929 10967
32548   799
33046   814
9238   4559
27183 17460
2682   3242
1416   2968
43850  1447
49171  2074
5935   3945
8555   4434
14562  5880
28199   666
36999   965
6264   4011
43363  1408
8166   4362
14428  5825
2486   3195
39348  1073
28506   673
30643   735
12486  5254
46782  1805
37484   984
53300   552
30186   722
49443  2110
3855   3478
38707  1041
24672 13016
8727    586
18354  7466
32114   783
39810  1097
43457  1415
8424   4405
33723   838
6570   4077
49593  2136
52345  2498
10476  4791
31008   748
17323  6946
31322   758
45355  1664
49865  2173
9764   4662
25418 14150
47251  1842
37547   988
11890  5113
29675   707
10730   593
45080  1644
2428   3182
51561  2389
30287   447
17244  6900
11548  5030
1263   2947
7758   4282
8618   4444
32178   787
10785  4859
49222  2081
31995   776
11848  5101
11709   596
33493   828
2316   3167
26548 16231
6880   4130
52739  2559
43295  1401
43088  1381
51277  2359
44506  1600
48987   538
32423   791
15439  6181
44086  1554
154    2770
4185   3557
37825  1002
15282  6133
6624   4084
8358   4398
10958  4901
28947   684
50950  2321
18392  7473
43780  1441
1425   2972
8423   4405
40867  1175
37606   485
49356  2098
44016  1546
15511  6213
38011  1009
42022  1267
20212  8645
51191  2348
18666  7631
48484  1980
28276   362
52464  2516
39861  1100
35636   474
53450  2675
14860  5986
23390   631
39084  1060
15210  6108
30886   743
52759  2562
18366   616
29163   693
25353   642
20911  9123
6901   4135
10228  4744
11576  5038
4162   3550
48920  2042
48454  1975
48873  2035
46717  1793
7789   4286
13502  5540
7892   4312
44338   521
33875   844
15401  6169
24171 12342
8890   4488
42577  1328
44186  1569
40946   500
6988   4155
10015  4708
12285  5215
14673  5921
50641   544
13467  5530
14331  5804
43505  1422
49200  2079
19451  8098
52540  2531
15570  6244
38589  1036
26624 16389
46231  1752
28617   675
19156  7916
22900 10937
1980   3092
46071  1736
16548  6610
33557   830
21471  9569
41219  1207
26719   645
36517   945
45813  1712
49530  2124
41333  1214
2228   3145
22533 10572
53406  2668
23136 11156
8544   4432
42032  1268
29335   698
4729    572
33161   816
22960 11007
14317  5799
13689  5599
18235  7404
17488  7025
23343   422
10427  4784
34527   868
4377   3607
25629 14502
9442   4592
1790   3050
50925  2319
12292  5217
39500  1079
9713    590
8611   4443
2597   3218
40900  1178
21479  9576
50968  2326
24022 12196
47557  1874
17081  6810
16076  6419
12857  5359
828    2866
36193   931
17048   612
37129   971
31516   765
49602  2137
49429  2107
24534 12823
5427   3824
19892  8442
49070  2059
29352   698
10389   593
19829  8396
44488  1597
36155   928
6445   4047
20802  9033
10514  4801
353    2804
5138   3763
14721   605
18632  7602
39181  1063
22022   628
19423  8075
31905   776
26410 15930
16380   609
1068    558
47857  1909
27786   649
21945 10016
3086   3314
2133   3123
18849  7727
36993   964
28314   432
2382    561
51948  2441
39574  1081
49281  2091
42004  1265
32074   781
9164   4541
30503   732
39273   490
50614   399
24036   633
53776  2726
41309  1212
49378  2100
32845   807
23507 11514
47675  1882
33215   821
20004  8543
16494  6589
52230  2484
38411  1024
19810  8374
29239   696
42176  1286
35149   890
22072 10093
6206   3998
15239  6116
34589   872
24756 13109
12164  5179
15074  6058
26752 16558
35640   475
47364  1846
13250  5476
8403   4401
27525 18257
22006 10076
31488   765
26963 17038
43040  1374
45764  1706
50183  2222
2078   3108
16527  6604
1509   2994
45724  1698
38811  1046
6672   4098
6224   4004
25189 13777
40087  1114
5825   3915
2508   3199
9504   4611
37680   992
23824 11888
39417  1076
29818   709
32264   789
36971   962
30902   744
16669  6663
719    2856
41234  1207
27244 17617
41420  1226
42541  1323
3413    568
6480   4057
45447  1673
30172   721
19774  8342
7797   4290
15918  6366
13142  5436
1635   3016
30217   723
44623  1608
11      339
44182  1568
14785  5949
20234  8663
5549   3856
28320   432
631    2841
32033   778
4810   3701
46873  1813
28855   683
13929  5667
42961  1364
40825  1170
32218   789
34976   472
41078  1192
47668   531
14152  5741
11754  5078
26974 17052
9810   4669
16293  6517
10850  4872
30558   734
28765   680
9402   4586
43944   516
15464  6191
12291  5217
1185   2930
37753   998
9308   4574
24007 12174
31486   765
40620   499
40531  1147
46076  1736
12988  5396
16307  6526
21745  9814
51755  2406
21085  9256
27991   658
39083  1060
13222  5460
51300  2362
15407  6169
9298   4571
22267 10317
12901  5373
29613   439
28621   432
27286 17759
24633 12968
27239 17607
30983   746
23416 11405
53831  2737
15713   608
43827  1443
8079   4338
3040    565
8283   4382
51613  2395
50210  2228
514    2823
6351   4033
4502   3629
6658   4093
33347   827
52342  2498
25928 15083
52163  2473
10327  4764
53807  2732
32515   798
45554  1687
43665  1436
855    2870
49425  2107
17644  7107
46597  1786
2806   3263
35257   895
28676   678
52720  2555
29382   698
26224 15646
4286   3584
38284   487
28129   664
38542  1033
16276  6509
15173  6097
5747   3894
20897  9116
30547   734
25781 14750
5009   3744
5882   3927
41863  1257
3240   3353
52313   550
23202 11209
52198  2479
15549  6233
49782  2161
45417  1668
28594   675
51081  2333
18329  7457
44345  1580
49643   540
35716   911
30075   720
14629  5906
28789   681
43943   516
5041    573
12316  5221
27033   645
5095   3755
6855   4125
38392  1024
34028   849
3152   3332
17069   612
14726   605
39857  1100
1037   2905
40598   497
274    2793
4709   3679
48804  2025
22578 10628
52104  2459
33646   833
2420   3180
22925 10962
22638 10685
21138  9295
18574  7577
3840   3473
15165  6095
32969   461
22360   628
4070    571
4736    573
48115  1935
7093   4166
27484 18168
19315  8024
23958 12094
3751   3454
4140   3544
5070    574
617    2839
18437  7500
40520  1145
51969   545
4925   3726
36648   948
41308  1212
28850   683
23235 11238
37088   969
5073   3750
25018 13553
37834  1002
53917  2753
868    2872
31363   761
46276  1754
12948  5386
29589   706
25621 14489
48567  1991
14894  5997
28142   665
19524  8157
35502   904
1452   2977
4023   3522
7421   4227
26591 16309
13164  5443
34764   876
3954   3504
34181   854
33772   841
36920   961
46307   526
12638  5292
11386   596
18977  7812
32371   790
14796  5952
21012  9225
40117  1115
15828  6333
6253   4010
25848 14915
5765   3897
1561   3004
48745  2015
42434  1314
12427  5241
26662 16472
33896   844
40372  1130
6898   4134
17311  6936
17676  7127
50423  2259
51678  2398
5164   3770
52320   550
41271   502
41854  1255
30      357
759    2858
25481 14251
15465  6192
22087 10107
50015  2196
33211   820
2727    565
37783  1000
36522   945
50299   544
11986  5143
48095  1933
48390  1966
50013  2196
26554 16239
31058   752
16900  6745
34342   862
9688   4652
53825  2737
15404  6169
52560  2535
53148  2623
50042  2199
48604  1996
9497   4608
28505   673
41874  1257
30581   734
50850  2312
30689   737
7453   4234
29170   694
1232   2941
199    2777
32615   457
45737  1699
35602   907
50792  2304
16911  6751
6641   4089
6353   4034
47287   394
14103  5720
10604  4826
16077  6419
8404   4401
38067  1013
20663  8950
5992   3954
27968   658
51727  2401
280    2795
21926  9999
1666   3024
12360  5231
35195   891
18107  7325
12933  5383
41024  1187
469    2818
24589 12898
15271  6132
45912  1721
26571 16277
50248  2234
46214  1751
32215   789
53718  2720
31828   775
32081   781
39965  1106
15085  6062
21690  9788
18844  7724
15003  6043
16662  6662
42115  1278
22501 10538
13597  5562
35112   886
40408  1133
53102  2614
2708    562
53874  2745
14773  5946
43870  1449
35575   906
36802   956
44286  1577
9793   4666
49612  2138
53412  2669
7518   4242
47974   532
44014  1546
31330   759
26080 15309
3852   3478
12512  5260
40697  1158
27934   430
3515   3404
24113 12268
8023   4332
10900  4884
19115  7881
21580  9682
16770  6680
34638   872
22315 10356
39826  1097
30105   720
4752   3685
52336  2497
11455  5007
48197  1947
13729   603
2104   3115
6653   4092
39076  1059
40548  1150
12280  5211
28939   684
25724 14638
31928   776
32891   810
5912   3936
13235  5466
22986 11036
40820  1170
3715   3453
39641  1084
10854  4873
549    2829
18273  7421
49653  2140
37305   979
20338  8736
32089   781
45740  1700
12261  5207
49067  2058
32170   787
17113  6825
8326   4391
8496   4420
42564  1327
36283   477
20587  8895
15942  6377
12297  5218
683    2850
33676   837
30306   725
22997 11050
41129  1197
37256   977
30936   449
30768   741
45852  1715
38029  1010
41537  1235
43663  1436
26369   645
11941  5131
4048   3530
22599 10652
49591  2136
19470  8110
34982   880
11445  5006
21675  9777
13328  5501
10848  4872
48530  1986
27528 18275
48014  1920
9242   4559
30834   743
27742 18791
40666  1154
29082   689
18436  7500
39436  1076
23045 11075
30107   720
40189  1120
30888   743
34176   854
36724   954
32622   457
12611  5290
47549  1872
22573 10623
51720  2401
32999   812
28379   668
21288  9444
42037  1268
43099  1383
36532   945
38220  1016
5311   3803
14240  5768
29886   710
373    2808
41130  1197
15169  6097
50268  2238
15738  6295
21434  9540
53590  2699
41474  1230
50000  2193
33227   821
2934   3290
50610  2287
53228  2641
18962  7800
35523   905
53663  2708
1621   3013
34247   855
47517  1867
26757 16564
16614  6639
33338   827
9697    589
26805 16687
14046   605
32901   810
14694  5929
25058 13572
13723   603
46836  1809
18572  7575
35684   910
5120   3762
769    2858
19650  8261
20512  8843
16872  6732
24841 13242
790    2861
33426   828
29455   702
9706    589
19036   621
17293  6928
9082   4522
38787  1046
24618 12945
40152  1116
11375   596
14572  5882
31940   776
37569   989
42448  1315
16534  6606
7541   4244
22280 10333
14154  5741
18587  7584
20380   625
23143 11161
7082   4163
31420   764
24817 13203
42833  1356
29280   698
7172   4183
31673   769
34730   875
48589  1993
4313   3595
30879   743
43636  1433
18008  7283
17227  6888
34152   854
20754  8994
25157 13730
49475  2114
21977 10046
42535  1323
10896  4884
2411   3179
11228  4964
24701   638
18936  7781
50208  2227
9989   4704
22492 10521
46273  1754
14038  5706
44840  1625
36860   958
27889   655
50759  2298
19018  7832
594    2838
23927 12053
10130  4719
7052    579
30018   717
53226  2639
13710  5602
21950 10019
24625 12958
7934   4318
50889  2316
513    2823
6738    579
15375   606
24387   638
1870   3070
24951 13420
34835   878
2244   3148
4163   3550
6716    413
32286   453
4321   3596
41209  1205
5218   3781
41495  1232
39527  1080
4195   3562
53380  2661
35944   475
7023   4158
51483  2379
48506  1982
13891  5654
41392  1221
4770   3690
51111  2337
9777   4663
10672  4839
48171  1944
19910  8456
438    2815
14620  5902
46252  1754
13230  5463
38696  1041
9992   4704
20047   625
16304  6523
23834 11912
22147 10184
1987   3095
22448 10476
45215  1656
41512  1235
44574  1607
27422 18026
38430  1026
32485   795
22186 10221
33176   818
50379  2250
11713   596
24536 12825
46675  1789
44561  1605
17728   614
28094   663
18146  7351
10445  4788
23822 11886
7358   4216
21027  9234
2967   3298
7609   4259
24564 12853
21121  9283
12725  5312
31954   452
20917  9131
32122   784
25389 14080
13812  5627
8500   4422
39794  1095
32237   789
29176   694
23636 11660
17239  6895
44022  1546
39670  1087
24580 12880
37511   985
22636 10685
53927  2756
44952  1635
17500  7034
6888   4132
157    2770
940    2885
8884   4486
46366  1760
43270   506
37140   971
43095  1382
40094  1114
45304   524
10410   593
41886  1259
41627   504
22658 10703
42730  1342
22942 10984
11932  5127
34304   858
48618  1999
21710   627
46414  1767
45014  1637
29272   698
36951   480
50357  2246
52460  2516
49079  2060
47418  1851
32771   803
8657   4455
6410   4039
39017  1056
7456   4234
52716  2554
47529  1869
30004   716
572    2833
33422   828
35849   917
17725   614
39409  1076
15324  6152
43760  1439
1787   3050
52712  2553
12563  5277
23440 11431
2860   3274
53360  2657
28977   435
1063    558
25139 13702
28897   684
9024   4515
42825  1354
20577  8887
27670 18678
12842  5353
48295  1957
9027   4516
22951 10996
24587 12896
43241  1399
21811  9882
53112  2616
43942   516
11432  5003
33535   829
33039   814
21079  9253
4922   3726
15377   606
19784  8349
22179 10217
12921  5376
42130  1279
34712   874
19136  7903
17609  7091
17544  7059
30026   718
37024   965
25533 14351
31020   749
8986   4508
9694    589
28840   683
6727    577
46180  1746
25246 13858
38796  1046
45736  1699
22673 10720
52027  2447
1691   3033
34465   865
37031   966
31113   754
44777  1622
15090  6065
46206  1750
18130  7340
11257  4969
21679  9781
12534  5266
30855   743
368    2808
1410    561
4837   3709
27194 17492
50533  2274
21678  9781
29836   710
15778  6311
4928   3729
44641   521
46495  1778
41087  1192
48305   534
23513 11520
35004   882
15665  6283
23565 11574
40268   492
34534   868
36096   926
39480  1079
41993  1264
27485 18172
29028   687
35614   473
34628   872
9540   4619
21882  9954
39208  1065
42061  1270
47891  1913
49980   541
42023  1267
31792   773
17082  6810
38121  1013
29373   698
25289 13942
38801  1046
43821  1443
3170   3337
48981   537
32494   796
30965   746
46093  1739
39751  1094
1714    561
4247   3577
30035   718
37149   972
53328  2654
35508   904
45758  1705
13190  5452
40086  1114
2897   3282
24038   633
20825  9051
47289   394
19912  8457
29519   703
26409 15930
29060   687
43109  1385
7132   4173
52449  2515
12347  5227
27556 18343
51648   545
21993 10061
15158  6093
2995   3303
44793  1624
51221  2352
26220 15618
8078   4338
4593   3655
38451  1028
8554   4434
20784  9022
21931 10004
2876   3276
19712  8286
40014  1107
22133 10164
37402   983
43041  1374
19696   624
47796  1899
21107  9278
42331  1296
18532  7553
16767  6677
33837   844
26531 16189
19436  8088
39097  1061
27289 17760
15671  6286
26874 16803
38414  1024
30670   737
47350  1845
52056  2452
14128  5728
7431   4229
2920   3287
53687  2715
8704    585
43912   512
15875  6350
30009   716
31741   772
17472  7013
14533  5866
49068  2058
149    2768
2639   3229
3302   3368
36015   921
35272   895
48971   537
46535  1781
49205  2079
35952   475
48063  1928
1856   3066
2467   3192
12404  5233
30671   737
11268  4971
38651  1040
35566   906
28884   684
43386  1410
52799  2569
13044   600
6925   4138
50619   400
7508   4241
30871   743
25745 14674
20525  8852
38187  1015
17864  7207
8014   4328
24393 12626
46139  1745
26347   645
20508  8840
52644   552
36514   945
47849  1908
26116 15393
53404  2668
21966 10036
48006  1919
21596  9698
3431   3385
39138  1061
5642   3880
46585  1786
45602  1690
33120   816
35207   891
51354  2364
40922   499
32600   802
23447 11435
5478   3838
39935   492
50057  2201
2432   3183
26037   645
4699   3676
37550   988
24748 13097
51476  2377
10261  4751
44475  1595
1189   2932
35694   911
52611  2545
1431   2973
43373  1409
49100  2063
24674 13027
33429   828
37986  1008
42189  1286
31809   774
47017  1819
33262   826
44324   521
41668  1240
25675 14597
3968   3508
25035   641
30325   726
9124   4535
43292  1401
23080 11108
44520  1600
48094  1933
45925  1721
32659   802
45763  1706
6998   4155
25017 13553
15341  6159
32776   803
39660  1087
146    2767
16891  6742
39755  1094
929    2882
27250 17658
23983 12140
31105   753
37714   995
12798  5335
46054  1732
50970  2326
22223 10278
8081   4338
33032   814
43080  1378
23876 11968
25989 15197
4166   3553
45963   526
1488   2988
15883  6352
41641  1238
20969  9178
20678  8958
8311   4389
21045   625
1544   3001
10263  4751
10864  4875
43461  1417
42634  1332
29882   710
33894   844
49045  2056
43161  1389
34598   470
24303 12551
34756   876
33525   829
27705   648
36257   935
9648   4641
2178   3136
47040  1819
30726   738
46909  1814
12790  5331
10984  4911
35133   889
13596  5561
1318   2958
16116  6441
45057  1641
45248  1659
5504   3845
14912  6002
14161  5745
21095  9262
23287 11312
19275  8000
38848  1050
2890   3282
31955   452
45088  1646
252    2789
34522   868
26640 16412
2614   3223
28638   434
45638   525
39742  1092
53125  2617
23257 11263
7534   4243
20660  8949
24119 12273
28526   675
5723    575
4815   3701
51124  2339
24070 12210
8202   4368
18026  7291
23550 11560
28153   665
19750  8317
28289   367
13006  5405
13342  5504
19429  8079
30474   732
13449  5522
51633   544
49996  2192
45012  1637
35574   906
9701    589
49972   541
2633   3229
26625 16390
3845   3475
20717   625
40416  1134
32783   803
30242   723
38532  1033
36085   926
43412  1412
22446 10473
21560  9660
12999  5401
41954   505
26915 16931
3509   3402
53524  2689
8903   4491
7256   4197
42894  1359
6982   4153
25172 13756
12161  5177
27439 18062
18325  7453
40863  1175
44171  1566
46643   526
12553  5273
16516  6600
9475   4603
15149  6089
23772 11826
19794  8362
22436 10463
29507   702
20685  8964
48161  1942
36639   948
51739  2403
25756 14709
39761  1094
52583  2538
26845 16776
1882   3074
29103   689
10083  4711
26053 15254
8205   4369
49301   539
40168  1117
24902 13329
48885  2037
39593  1084
3376    408
2788   3257
23023   630
51107  2337
52124  2464
26159 15475
1555   3003
34397   863
49179  2074
33805   842
43239  1399
36298   477
36454   942
33188   818
4903   3723
25476 14242
32196   788
45706  1698
9333   4580
13724   603
16508  6597
12616  5291
52396  2509
22602 10655
16262  6504
52433  2513
23570 11578
10030   416
21549  9650
14432  5826
23469 11464
607    2839
33929   844
23953 12085
19822  8387
30817   743
6305   4022
24818 13205
5752   3895
16428  6561
48035  1923
42858  1356
6145   3989
48931  2042
4916   3724
38412  1024
17835  7192
39923  1105
44263  1575
27179 17451
47197  1838
35159   891
44283  1577
941    2886
2329   3169
26731 16505
5726    575
42102  1274
43714  1437
42003  1265
39999  1107
31241   757
51835  2422
15891  6353
598    2838
1335   2961
7842   4303
41529  1235
49044  2056
31332   759
2306   3163
53742  2723
28021   658
15925  6368
838    2867
969    2893
2943   3293
29735   708
16055  6412
52500  2525
12884  5368
16084  6424
3993   3516
45034  1637
34820   878
34735   876
19782  8348
17117  6827
2581   3214
24606 12923
4351   3601
28662   677
48508  1982
15655  6278
32144   786
53387  2662
42093  1274
12151  5174
32386   790
25758 14709
48994  2048
42245  1292
17987  7275
8921   4496
32879   810
28697   679
7361   4218
19456  8101
30296   447
9132   4536
10536  4805
40317  1125
53454  2676
351    2804
5595   3869
880    2873
51036  2329
14225  5765
28453   671
19881  8431
14276  5779
39663  1087
21279  9432
22805 10827
8679   4456
33758   840
37528   987
12022  5152
52871  2581
26196 15562
21059   625
28128   664
9627   4637
32302   454
8487   4418
15978  6397
44259  1574
23888 11985
11675  5058
39274   490
40211  1122
24323 12576
7857   4304
13382   601
15418  6175
10360  4771
38297   487
35172   891
25051 13555
16328  6532
3499   3400
28404   669
19603  8223
41796  1249
30534   734
51388  2368
1886   3075
28691   679
16536  6606
77      554
17992  7276
16965  6776
24912 13355
34681   873
233    2787
46860  1813
37697   994
25880 14982
29409   700
52886  2583
40271   493
26865 16789
23733 11775
8764   4466
35123   887
49120  2066
30590   734
34755   876
42098  1274
3583   3421
36940   478
31584   767
13592  5560
5969   3950
33897   844
34463   865
17924  7239
36235   933
8332   4395
47030  1819
19919  8467
8665   4455
46689  1790
18918  7766
52095  2459
44740  1618
13366   419
17361  6968
44772  1621
15082  6061
29023   687
17621  7094
30578   734
15505  6210
40293  1125
17471  7010
35477   902
33672   836
28726   680
53606  2701
4940   3732
35509   904
45752  1703
20938  9146
32661   802
3128   3326
53843  2739
21740  9808
44754  1619
34848   878
7465   4234
36433   942
567    2832
616    2839
44499  1599
14990  6038
2532   3205
5607   3871
21091  9260
8870   4484
10963  4903
39014  1056
46512  1779
48479  1979
27499 18193
35521   905
22029   628
52645   552
19577  8205
18661  7625
6870   4128
28991   686
2698   3246
18536  7553
19847  8408
11422  5002
1890   3075
3670   3444
11721   596
10496  4798
48475  1978
52807  2572
15455  6189
18221  7393
17056   612
30788   742
27797   649
17765  7154
29973   715
32692   802
7010   4157
2209   3142
24441 12696
12954  5387
6931   4140
53494  2683
25245 13853
4646   3669
1402    560
32225   789
33143   816
51257  2356
5146   3765
1441   2975
13820  5631
44347  1580
44599  1607
9410   4588
10429  4784
45152  1654
36174   929
11778  5083
51918  2437
30472   732
15223  6112
133    2764
47522  1868
32390   791
43002  1369
31948   776
21345  9487
48196  1947
2283   3160
37664   992
47473  1859
18357  7467
11400   596
6510   4064
19570  8201
30316   726
42207  1289
24114 12268
8985   4508
43230  1397
38230  1017
2644   3231
30992   746
23376   631
49844  2169
30612   447
4704   3678
1727    561
13708  5602
39419  1076
6562   4077
34973   472
35317   896
46928  1815
17490  7026
7907   4314
18095  7314
30060   719
29261   698
47444  1856
40683  1155
8442   4410
6261   4011
15364   605
27625 18522
18685  7641
7915   4315
29723   707
3920   3496
841    2868
36183   930
48259  1954
42491  1319
39883  1103
3059    566
15460  6190
1011   2900
7419   4227
21089  9258
26027   645
39128  1061
23419 11406
8800   4473
24879 13298
47179  1836
8095   4341
46899  1814
31204   756
38584  1035
34143   854
39753  1094
9670   4645
35871   918
29978   715
5694   3888
36890   959
901    2876
26898 16881
19580  8210
7455   4234
23488 11489
23494 11500
25590 14429
14266  5778
3054    566
21421  9529
46152  1746
22458 10483
913    2879
10803  4862
8702    585
27657 18614
18911  7761
27960   432
28383   668
53068  2608
24059   635
52670  2550
50104  2208
51764  2407
22582 10633
6198   3997
21683  9784
18513  7546
4257   3580
30884   743
39258  1069
48360  1963
52820  2573
4230   3572
19837  8401
26128 15413
45250  1659
46148  1746
32385   790
3057    566
24975 13477
43892   508
28270   361
19791  8359
36466   942
37260   977
45121  1651
14903  5998
20848  9072
5914   3936
43718  1437
6085   3972
9921   4690
20935  9141
19259  7987
27869   653
46317   526
35086   886
2285   3160
42204  1289
21723  9791
21501  9596
50888  2316
51708  2400
46455  1774
3895   3489
39559  1080
19106  7875
39297   491
10819  4867
8042    581
20961  9173
29679   707
21040   625
17943  7250
48762  2016
14062   605
53810  2733
3242   3354
12373   597
48276  1956
49523  2123
16829  6713
17695  7134
47756  1892
12764  5324
8345   4398
47704  1884
33295   462
2815   3265
30299   447
11231  4964
53940  2757
16792  6692
48817  2027
26321 15824
12886  5369
42812  1353
46454  1774
35653   907
30148   720
51683  2398
24324 12581
28422   670
3392    567
49565  2131
42604   505
52110  2461
52372  2504
41585   388
48610  1998
51334  2362
4762   3689
31701   770
5162   3770
12732  5314
10842  4872
20422  8778
509    2822
26677   426
16384  6541
8355   4398
50215  2230
48515  1984
4545   3640
31155   755
6236   4006
2108   3116
40693  1157
2535   3205
26006 15231
49971   540
46134  1745
43971   518
8458   4413
11520  5024
40360  1129
37202   974
46396  1764
37599   485
39289   491
9607   4633
33479   828
13147  5438
5327   3808
24460 12722
12202  5190
43375  1409
6187   3996
23734 11776
10337  4766
13270  5484
11464  5010
5625   3876
48349  1962
53812  2733
7926   4316
30719   738
34505   868
47450  1857
37086   969
36925   961
916    2879
23861 11951
34173   854
48669  2002
4260   3580
4801   3697
52753  2560
22665 10710
33924   844
31569   766
10915  4890
38868  1050
5408   3819
40063  1113
5113   3759
48116  1936
2684   3242
27727 18745
39375  1074
18571  7575
27585 18426
35132   888
6800   4116
23934 12063
785    2861
46381  1763
52405  2511
3881   3484
50455  2264
41752  1244
43758  1439
48929  2042
50460  2264
21612  9705
42220  1289
52881  2583
44006   394
8889   4488
44225  1571
38841  1049
27931   429
6609   4082
2374    561
39265  1069
25718 14625
45708  1698
13804  5624
10138  4722
5619   3874
50652   544
16235  6494
13819  5630
6948   4142
20036   421
30684   737
33539   829
44037  1547
497    2822
25227 13827
15757  6300
9645   4641
34159   854
39299   491
42116  1278
10706  4849
26762 16580
26217 15613
21244  9391
27458 18114
9472   4602
52663  2549
34329   861
2303   3163
49859  2171
14455  5833
3899   3489
17563  7072
845    2869
33768   841
7039   4162
51430  2373
1343   2961
12951  5387
40480  1141
33470   828
11989  5143
42309  1295
24839 13234
6442   4046
43930   515
4878   3714
14963  6025
474    2819
17384   612
40507  1143
43064  1377
35577   906
39182  1063
28029   658
4338   3599
46351  1759
26132 15420
34356   863
44421  1588
4764   3689
30632   734
3380    408
41544  1235
33249   825
7678   4274
48782  2021
4075    571
19826  8393
46350  1759
30802   742
47460  1857
16885  6738
47090  1824
40686  1156
2154   3127
52790  2568
38028  1010
7533   4243
39565  1080
30498   732
12436  5242
26594 16316
13313  5497
48052  1927
47842  1908
49531  2124
49760  2159
37614   485
28604   675
12789  5331
46725  1794
50381  2250
40497  1142
37769   999
3996   3516
18132  7340
39027  1056
50543  2275
6478   4054
15788  6317
36383   941
8506   4423
19886  8436
48076  1930
9326   4579
2802   3261
3763   3457
29499   702
30801   742
27832   651
28813   683
28205   666
22961 11009
8837   4478
29523   703
44554  1605
49360  2098
4200   3563
4493   3629
18042   614
4241   3576
23459 11455
30889   743
20849  9072
21183  9335
46431  1770
17558  7068
28137   664
30372   729
12946  5386
10517  4801
46367  1760
39119  1061
29106   689
3220   3350
36127   928
53601  2700
10102  4715
47754  1892
37154   972
39282   491
8609   4443
24172 12342
1788   3050
18383   618
44572  1606
3735    569
40511  1144
38484  1031
38544  1033
45864  1715
36872   958
46223  1752
26925 16955
37778   999
11603  5045
33092   815
6412   4040
37423   984
38213  1016
52924  2590
38505  1031
4786   3696
31417   764
38570  1035
21810  9881
2245   3148
49640   540
22867 10907
32791   804
5115   3760
2536   3205
12896  5373
49352  2096
45749  1702
13522  5544
19293  8011
25949 15118
5898   3931
17741  7141
6869   4128
14242  5769
36614   477
14907  5999
13639  5581
37082   969
42402  1308
2098   3114
25041   641
2391    561
45582  1689
23793 11851
32496   796
1724    561
47733  1890
52122  2463
37960  1007
25877 14973
13403   602
44357  1580
3015   3306
28579   675
9461   4600
31718   771
35941   475
32646   802
5226   3784
2195   3139
6705    410
35021   882
6778   4113
39237  1067
49740  2155
20578  8888
36882   958
44660   522
25278 13921
1495   2991
19020  7835
21140  9296
15753  6300
47985   533
49528  2123
6354   4034
12031   596
31477   765
7982   4325
9190   4547
32468   794
21388   626
31900   776
8103   4346
9083   4522
29025   687
19277  8001
48260  1954
26158 15474
36995   964
48448  1974
31070   752
2795   3259
39850  1100
3731    568
45556  1687
46996  1817
14756  5939
26169 15499
49484  2116
23292 11322
18100  7319
46137  1745
46835  1809
24859 13267
1580   3007
2555   3208
24072 12210
48526  1985
48281  1956
27888   655
6184   3994
27693   648
30419   730
46632   526
8467   4414
4933   3730
39981  1107
47886  1912
14459  5834
681    2850
11164  4948
49017  2052
9902   4686
16099  6435
40385  1132
45592  1689
33871   844
46144  1746
3418    568
34350   862
19484  8120
34400   863
8313   4389
31597   367
38240  1018
37820  1002
24384   638
6793   4114
31708   770
37124   970
16100  6436
10443  4788
4367   3605
45005  1637
5724    575
19807  8371
15206  6108
13056  5410
8338   4395
10035   417
4164   3551
8179   4364
2606   3219
2631   3228
17272  6915
34641   872
50854  2312
4246   3577
35255   895
1683   3031
33124   816
16595  6628
40072  1114
46099  1741
50769  2300
4850   3710
8591   4439
8228   4372
7669   4271
48404  1969
10533  4805
33114   816
24532 12822
41483  1232
28      357
42613   505
35469   901
45806  1710
36358   939
33728   839
41394  1222
202    2777
23087 11113
50986   544
10504  4798
36489   943
7717    580
8823   4478
9399   4586
29192   694
15546  6232
50800  2306
16731   611
42223  1290
22803 10825
38641  1040
8873   4484
21090  9259
8720    586
21154  9306
15145  6088
18907  7758
4908   3724
27877   654
42058  1270
3712   3451
31246   757
51763  2407
3921   3496
39403  1076
15012  6046
16746  6667
3573   3419
9990   4704
53619   552
25887 15005
52917  2589
34305   858
49054  2057
31937   776
43022  1371
7287   4201
2598   3218
20654  8943
30033   718
8189   4368
40514  1145
17296  6931
45416  1668
39022  1056
45046  1640
48148  1940
21147  9301
19693   624
35003   882
32836   807
2355   3173
26428 15957
51514  2384
39749  1094
52031  2448
51223  2352
35479   902
23813 11873
34768   876
48844  2030
25930 15091
17811  7178
24553 12841
23910 12030
33217   821
35333   898
32191   788
51280  2359
14970  6028
194    2777
8661   4455
53875  2745
13239  5468
34624   872
14299  5789
35839   916
15155  6092
18162  7362
34933   374
30048   719
1483   2986
31644   451
27564 18371
28296   432
52877  2583
24121 12283
20080  8555
20069   625
6105   3977
20285  8703
50011  2195
19839  8401
32139   786
9864   4679
46752  1800
12714   599
11469  5012
10010  4707
43797  1442
48012  1920
18127  7338
14355  5812
27364   646
46082  1737
1012   2900
37114   970
31517   765
21272  9424
42041  1268
40999  1182
4059    571
52976   552
7026   4158
50218  2230
42993  1368
29667   706
26526 16181
49194  2076
10736   594
7221   4192
12498  5257
11858  5104
11502  5019
14991  6038
31958   452
28727   680
47653   530
2993   3303
39479  1079
43289   507
44821  1624
1878   3073
46086  1738
33566   830
21143  9298
25317 13995
18028  7292
24743 13092
32606   802
1248   2946
7716    580
35380   899
37329   980
7009   4157
43784  1441
949    2889
51338  2362
2976   3299
36437   942
42649  1333
11959  5136
16031   608
35731   911
43600   507
31716   771
3433   3385
10175  4732
18073  7300
43773  1440
52300   548
3391    566
10800  4861
10997  4914
27208 17530
8246   4375
45479  1677
17127  6833
23418 11406
45393  1667
47564  1875
45138  1654
20122  8584
41979  1263
37898  1007
16666  6662
40466  1140
13887  5653
28396   668
20947  9160
49478  2115
23353   422
48216  1949
25691   644
13018  5408
27920   657
10183  4735
27916   657
8755   4466
14193  5758
19465  8108
51258  2356
22195 10232
3906   3492
35630   473
2710    563
45580  1689
39509  1080
33017   814
48119  1937
46514  1780
49082  2061
42956   506
39050  1057
39805  1096
28511   673
16119  6442
36958   480
52450  2515
46900  1814
12504  5258
47853  1909
12663  5301
33531   829
39881  1103
45850  1715
51706  2400
48833  2030
44982   523
19345  8044
42413  1311
19706   624
8421   4405
51765  2409
7234   4194
47339   530
14178  5751
48857  2033
28619   675
45977   526
31022   749
37552   988
166    2772
45291  1662
22869 10910
32236   789
41868  1257
24989 13500
24410 12648
48069  1929
34520   868
22353   628
19067  7848
12708   599
44856  1627
13829  5636
17900  7227
7251   4197
13113  5428
41188  1202
24691   638
23128 11153
5606   3871
39186  1063
53688  2715
48754  2016
22224 10279
2001   3099
19278  8001
44269  1576
33208   820
51805  2415
26905 16904
22387 10412
24375   637
24213 12401
8128   4354
14598  5889
5976   3951
31796   773
14901  5998
3112   3323
35701   911
49298   539
22206 10255
36994   964
11656  5055
16017  6409
8093   4340
17886  7219
34296   857
52988  2594
42551  1326
47347  1845
40559  1151
11087  4927
5536   3854
7955   4320
12898  5373
51557  2388
29379   698
7552   4249
27216 17552
29231   696
45087  1646
51330   544
25638 14525
53116  2617
40943   500
10224  4743
44312   520
51274  2359
15157  6093
38533  1033
20933  9140
40537  1148
26303 15802
45675  1694
16175  6465
21791  9858
34656   872
34456   865
40289   496
51612  2394
18678  7637
52535  2530
20486  8820
44332   521
41227  1207
32798   805
6075   3968
37189   973
39317  1070
24233 12431
31874   776
24786 13157
1148   2923
28364   667
33931   463
45755  1704
43589  1432
24100 12252
7071    579
18831  7715
19982  8526
12152  5174
41920  1262
42355  1300
10172  4732
44401  1584
46043  1729
26256 15708
28283   364
51049  2330
49563  2131
8515   4425
41259   500
16763  6674
35778   912
2689   3246
44379  1581
40200  1121
27280 17742
43654  1435
40854  1173
16192  6471
43583  1431
9677   4648
17385   612
9802   4668
28463   672
35724   911
23241 11248
25835 14866
10543  4808
3281   3362
3974   3510
26835 16733
47540  1871
4217   3568
14548  5877
17347  6962
341    2803
26632 16400
37593   485
31987   776
37377   982
50705  2291
38869  1050
6470   4054
30336   727
45042  1639
36629   478
30711   738
18789  7683
4956   3734
18060   616
3729    568
29726   707
35877   918
43846  1446
23203 11209
13428  5515
20731  8975
43698  1436
20087  8563
29601   706
38250  1018
35076   886
21799  9872
28109   663
49776  2161
19114  7880
26714   645
20515  8847
25340 14042
22706   630
32202   788
171    2773
13774  5616
21241  9386
47574  1875
6840   4123
3401    567
41743  1243
8635   4451
803    2862
20507  8840
23054 11087
43607   507
23686 11743
51652   545
49661  2141
12044   596
42500  1320
21494  9587
40498  1142
35608   907
53332  2655
33024   814
7824   4295
51207  2351
11953  5134
5645   3880
38149  1013
42847  1356
22551 10588
34964   471
13265  5483
2744   3248
43872  1450
481    2821
22785 10805
38511  1031
36595   947
21339  9482
7677   4274
27323 17849
18476  7522
4719    572
50318  2240
22013 10079
38196  1015
2525   3204
1376   2966
38383  1024
26781 16626
30739   739
52368  2504
28743   680
32662   802
41144  1197
5186   3774
23731 11769
2602   3219
41564  1237
7214   4191
1921   3082
5331   3808
13714   603
45527  1684
23632 11654
50182  2222
47122  1828
40661  1154
35837   916
41631   504
18664  7629
32079   781
9417   4588
24770 13132
18605  7589
10207  4740
35505   904
12017  5151
10977  4909
3118   3324
13470  5531
45470  1676
47630  1882
25866 14948
8343   4398
47726  1889
12548  5271
33898   844
44594  1607
31184   756
10      338
45035  1637
11451  5006
25044   641
39728  1091
26453 15992
10441  4786
51078  2333
26090 15323
21207  9348
24107 12261
16475  6582
25150 13720
5131   3763
19976  8523
27841   651
9388    589
39814  1097
33450   828
23120 11147
15804  6324
17192  6867
989    2896
38782  1046
12215  5194
14537  5868
30949   449
22723 10739
17218  6884
3981   3511
46727  1795
8028   4333
50203  2227
23556 11565
47703  1884
42030  1267
18601  7589
15319  6149
20108  8580
31821   775
8344   4398
29031   687
9327   4579
38370  1023
13454  5524
8054    583
40928   499
25093 13622
34311   858
42262  1294
43570  1431
33339   827
6552   4072
2988   3301
19925  8470
51488  2381
14967  6027
35856   917
37652   991
6065   3966
9233   4558
25587 14428
9334   4580
1336   2961
19025   620
37991  1008
53251  2645
40223  1123
24099 12248
37618   485
43816  1443
24071 12210
30481   732
21906  9973
15060   605
7127   4173
19828  8396
31281   449
8210   4370
31975   453

$dataset
[1] "diamonds"

$var
[1] "price"

$comp_value
[1] 0

$alternative
[1] "two.sided"

$conf_lev
[1] 0.95

$data_filter
[1] ""

attr(,"class")
[1] "single_mean" "list"
>
>
>
> cleanEx()
> nameEx("single_prop")
> ### * single_prop
>
> flush(stderr()); flush(stdout())
>
> ### Name: single_prop
> ### Title: Compare a sample proportion to a population proportion
> ### Aliases: single_prop
>
> ### ** Examples
>
> result <- single_prop("diamonds","cut")
> result <- single_prop("diamonds","clarity", lev = "IF", comp_value = 0.05)
>
>
>
> cleanEx()
> nameEx("sshh")
> ### * sshh
>
> flush(stderr()); flush(stdout())
>
> ### Name: sshh
> ### Title: Hide warnings and messages and return invisible
> ### Aliases: sshh
>
> ### ** Examples
>
> sshh( library(dplyr) )
>
>
>
> cleanEx()
> nameEx("sshhr")
> ### * sshhr
>
> flush(stderr()); flush(stdout())
>
> ### Name: sshhr
> ### Title: Hide warnings and messages and return result
> ### Aliases: sshhr
>
> ### ** Examples
>
> sshhr( library(dplyr) )
>
>
>
> cleanEx()
> nameEx("state_init")
> ### * state_init
>
> flush(stderr()); flush(stdout())
>
> ### Name: state_init
> ### Title: Set initial value for shiny input
> ### Aliases: state_init
>
> ### ** Examples
>
> r_state <<- list()
> state_init("test")
[1] ""
> state_init("test",0)
[1] 0
> r_state$test <- c("a","b")
> state_init("test",0)
[1] "a" "b"
> shiny::radioButtons("rb", label = "Button:", c("a","b"), selected = state_init("rb", "a"))
<div id="rb" class="form-group shiny-input-radiogroup shiny-input-container">
  <label class="control-label" for="rb">Button:</label>
  <div class="shiny-options-group">
    <div class="radio">
      <label>
        <input type="radio" name="rb" value="a" checked="checked"/>
        <span>a</span>
      </label>
    </div>
    <div class="radio">
      <label>
        <input type="radio" name="rb" value="b"/>
        <span>b</span>
      </label>
    </div>
  </div>
</div>
> r_state$rb <- "b"
> shiny::radioButtons("rb", label = "Button:", c("a","b"), selected = state_init("rb", "a"))
<div id="rb" class="form-group shiny-input-radiogroup shiny-input-container">
  <label class="control-label" for="rb">Button:</label>
  <div class="shiny-options-group">
    <div class="radio">
      <label>
        <input type="radio" name="rb" value="a"/>
        <span>a</span>
      </label>
    </div>
    <div class="radio">
      <label>
        <input type="radio" name="rb" value="b" checked="checked"/>
        <span>b</span>
      </label>
    </div>
  </div>
</div>
> rm(r_state)
>
>
>
> cleanEx()
> nameEx("state_multiple")
> ### * state_multiple
>
> flush(stderr()); flush(stdout())
>
> ### Name: state_multiple
> ### Title: Set initial values for shiny input from a list of values
> ### Aliases: state_multiple
>
> ### ** Examples
>
> r_state <- list()
> state_multiple("test",1:10,1:3)
[1] 1 2 3
> r_state$test <- 8:10
> state_multiple("test",1:10,1:3)
[1]  8  9 10
> shiny::selectInput("sim", label = "Select:", c("a","b"),
+   selected = state_multiple("sim", c("a","b")),  multiple = TRUE)
<div class="form-group shiny-input-container">
  <label class="control-label" for="sim">Select:</label>
  <div>
    <select id="sim" multiple="multiple"><option value="a">a</option>
<option value="b">b</option></select>
    <script type="application/json" data-for="sim">{}</script>
  </div>
</div>
> r_state$sim <- c("a","b")
> shiny::selectInput("sim", label = "Select:", c("a","b"),
+   selected = state_single("sim", c("a","b")),  multiple = TRUE)
<div class="form-group shiny-input-container">
  <label class="control-label" for="sim">Select:</label>
  <div>
    <select id="sim" multiple="multiple"><option value="a" selected>a</option>
<option value="b" selected>b</option></select>
    <script type="application/json" data-for="sim">{}</script>
  </div>
</div>
>
>
>
> cleanEx()
> nameEx("state_single")
> ### * state_single
>
> flush(stderr()); flush(stdout())
>
> ### Name: state_single
> ### Title: Set initial value for shiny input from a list of values
> ### Aliases: state_single
>
> ### ** Examples
>
> r_state <- list()
> state_single("test",1:10,1)
[1] 1
> r_state$test <- 8
> state_single("test",1:10,1)
[1] 8
> shiny::selectInput("si", label = "Select:", c("a","b"), selected = state_single("si"))
<div class="form-group shiny-input-container">
  <label class="control-label" for="si">Select:</label>
  <div>
    <select id="si"><option value="a">a</option>
<option value="b">b</option></select>
    <script type="application/json" data-for="si" data-nonempty="">{}</script>
  </div>
</div>
> r_state$si <- "b"
> shiny::selectInput("si", label = "Select:", c("a","b"), selected = state_single("si", "b"))
<div class="form-group shiny-input-container">
  <label class="control-label" for="si">Select:</label>
  <div>
    <select id="si"><option value="a">a</option>
<option value="b" selected>b</option></select>
    <script type="application/json" data-for="si" data-nonempty="">{}</script>
  </div>
</div>
>
>
>
> cleanEx()
> nameEx("sum_rm")
> ### * sum_rm
>
> flush(stderr()); flush(stdout())
>
> ### Name: sum_rm
> ### Title: Sum with na.rm = TRUE
> ### Aliases: sum_rm
>
> ### ** Examples
>
> sum_rm(1:200)
[1] 20100
>
>
>
> cleanEx()
> nameEx("summary.compare_means")
> ### * summary.compare_means
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.compare_means
> ### Title: Summary method for the compare_means function
> ### Aliases: summary.compare_means
>
> ### ** Examples
>
> result <- compare_means("diamonds","cut","price")
> summary(result)
Pairwise mean comparisons (t-test)
Data      : diamonds
Variables : cut, price
Samples   : independent
Confidence: 0.95
Adjustment: None

               mean    n       sd      se      ci
      Fair 4505.238  101 3749.540 373.093 740.206
      Good 4130.433  275 3730.354 224.949 442.848
 Very Good 3959.916  677 3895.899 149.732 293.995
   Premium 4369.409  771 4236.977 152.591 299.544
     Ideal 3470.224 1176 3827.423 111.610 218.977

 Alt. hyp.                        Null hyp.             diff     p.value
 Fair not equal to Good           Fair = Good            374.805 0.414
 Fair not equal to Very Good      Fair = Very Good       545.322 0.195
 Fair not equal to Premium        Fair = Premium         135.829 0.745
 Fair not equal to Ideal          Fair = Ideal          1035.014 0.011   *
 Good not equal to Very Good      Good = Very Good       170.517 0.545
 Good not equal to Premium        Good = Premium        -238.976 0.388
 Good not equal to Ideal          Good = Ideal           660.209 0.012   *
 Very Good not equal to Premium   Very Good = Premium   -409.493 0.049   *
 Very Good not equal to Ideal     Very Good = Ideal      489.692 0.01    *
 Premium not equal to Ideal       Premium = Ideal        899.185 < .001  ***

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> result <- diamonds %>% tbl_df %>% compare_means("x","y")
> summary(result)
Pairwise mean comparisons (t-test)
Data      : -----
Variables : x, y
Samples   : independent
Confidence: 0.95
Adjustment: None

    mean    n    sd    se   ci
 x 5.722 3000 1.124 0.021 0.04
 y 5.723 3000 1.114 0.020 0.04

 Alt. hyp.          Null hyp. diff   p.value
 x not equal to y   x = y     -0.001 0.959

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> result <- diamonds %>% tbl_df %>% group_by(cut) %>% compare_means("x",c("x","y"))
> summary(result)
Pairwise mean comparisons (t-test)
Data      : -----
Variables : x, y
Samples   : independent
Confidence: 0.95
Adjustment: None

    mean    n    sd    se   ci
 x 5.722 3000 1.124 0.021 0.04
 y 5.723 3000 1.114 0.020 0.04

 Alt. hyp.          Null hyp. diff   p.value
 x not equal to y   x = y     -0.001 0.959

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
>
>
>
> cleanEx()
> nameEx("summary.compare_props")
> ### * summary.compare_props
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.compare_props
> ### Title: Summary method for the compare_props function
> ### Aliases: summary.compare_props
>
> ### ** Examples
>
> result <- compare_props("titanic", "pclass", "survived")
> summary(result)
Pairwise proportion comparisons
Data      : titanic
Variables : pclass, survived
Level     :  in survived
Confidence: 0.95
Adjustment: None

 Yes  No   n     p    se    ci
 200 123 323 0.619 0.027 0.053
 119 158 277 0.430 0.030 0.058
 181 528 709 0.255 0.016 0.032

 Alt. hyp.              Null hyp.   diff  p.value
 1st not equal to 2nd   1st = 2nd   0.189 < .001  ***
 1st not equal to 3rd   1st = 3rd   0.364 < .001  ***
 2nd not equal to 3rd   2nd = 3rd   0.175 < .001  ***

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
> titanic %>% compare_props("pclass", "survived") %>% summary
Pairwise proportion comparisons
Data      : -----
Variables : pclass, survived
Level     :  in survived
Confidence: 0.95
Adjustment: None

 Yes  No   n     p    se    ci
 200 123 323 0.619 0.027 0.053
 119 158 277 0.430 0.030 0.058
 181 528 709 0.255 0.016 0.032

 Alt. hyp.              Null hyp.   diff  p.value
 1st not equal to 2nd   1st = 2nd   0.189 < .001  ***
 1st not equal to 3rd   1st = 3rd   0.364 < .001  ***
 2nd not equal to 3rd   2nd = 3rd   0.175 < .001  ***

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
>
>
>
> cleanEx()
> nameEx("summary.conjoint")
> ### * summary.conjoint
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.conjoint
> ### Title: Summary method for the conjoint function
> ### Aliases: summary.conjoint
>
> ### ** Examples
>
> result <- conjoint("mp3", dep_var = "Rating", indep_var = "Memory:Shape")
> summary(result, mc_diag = TRUE)
Conjoint analysis
Data     : mp3
Dependent variable   : Rating
Independent variables: Memory, Radio, Size, Price, Shape

Conjoint part-worths:
   Attributes      Levels      PW
       Memory         4GB   0.000
       Memory         6GB   7.667
       Memory         8GB  29.667
        Radio          No   0.000
        Radio         Yes   6.111
         Size       Large   0.000
         Size      Medium   6.333
         Size       Small   8.500
        Price         $50   0.000
        Price        $100  -6.833
        Price        $150 -33.833
        Shape    Circular   0.000
        Shape Rectangular -27.833
        Shape      Square -13.333
 Base utility           ~  58.111

Conjoint importance weights:
 Attributes    IW
     Memory 0.280
      Radio 0.058
       Size 0.080
      Price 0.319
      Shape 0.263

Conjoint regression results:
                    coefficient
(Intercept)              58.111
Memory > 6GB              7.667
Memory > 8GB             29.667
Radio > Yes               6.111
Size > Medium             6.333
Size > Small              8.500
Price > $100             -6.833
Price > $150            -33.833
Shape > Rectangular     -27.833
Shape > Square          -13.333

Multicollinearity diagnostics:
    Memory Radio Size Price Shape
VIF      1     1    1     1     1
Rsq      0     0    0     0     0
> mp3 %>% conjoint(dep_var = "Rating", indep_var = "Memory:Shape") %>% summary(., mc_diag = TRUE)
Conjoint analysis
Data     : -----
Dependent variable   : Rating
Independent variables: Memory, Radio, Size, Price, Shape

Conjoint part-worths:
   Attributes      Levels      PW
       Memory         4GB   0.000
       Memory         6GB   7.667
       Memory         8GB  29.667
        Radio          No   0.000
        Radio         Yes   6.111
         Size       Large   0.000
         Size      Medium   6.333
         Size       Small   8.500
        Price         $50   0.000
        Price        $100  -6.833
        Price        $150 -33.833
        Shape    Circular   0.000
        Shape Rectangular -27.833
        Shape      Square -13.333
 Base utility           ~  58.111

Conjoint importance weights:
 Attributes    IW
     Memory 0.280
      Radio 0.058
       Size 0.080
      Price 0.319
      Shape 0.263

Conjoint regression results:
                    coefficient
(Intercept)              58.111
Memory > 6GB              7.667
Memory > 8GB             29.667
Radio > Yes               6.111
Size > Medium             6.333
Size > Small              8.500
Price > $100             -6.833
Price > $150            -33.833
Shape > Rectangular     -27.833
Shape > Square          -13.333

Multicollinearity diagnostics:
    Memory Radio Size Price Shape
VIF      1     1    1     1     1
Rsq      0     0    0     0     0
>
>
>
> cleanEx()
> nameEx("summary.conjoint_profiles")
> ### * summary.conjoint_profiles
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.conjoint_profiles
> ### Title: Summary method for the conjoint_profiles function
> ### Aliases: summary.conjoint_profiles
>
> ### ** Examples
>
> cp <<- readLines(system.file("examples/profiles-movie.txt", package='radiant'))
> result <- conjoint_profiles("cp")
> summary(result)
Generate conjoint profiles
Data      : cp
# profiles: 18

Attributes and levels:
price = c("$10","$13","$16")
sight = c("Staggered","Not Staggered")
comfort = c("Average seat, no cupholder","Average seat, cupholder","Large seat, cupholder")
audio.visual = c("Small screen, plain sound","Large screen, plain sound","Large screen, digital sound")
food = c("No food","Hot dogs and popcorn","Gourmet food")

Fractional factorial design correlations:
             price sight comfort audio.visual food
price            1     0       0            0    0
sight            0     1       0            0    0
comfort          0     0       1            0    0
audio.visual     0     0       0            1    0
food             0     0       0            0    1

Fractional factorial design:
 Profile price         sight                    comfort                audio.visual                 food
       1   $10     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
       2   $10     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
       3   $10     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
       4   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
       5   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
       6   $10 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
       7   $13     Staggered Average seat, no cupholder   Large screen, plain sound              No food
       8   $13     Staggered    Average seat, cupholder   Small screen, plain sound              No food
       9   $13     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      10   $13 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      11   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      12   $13 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      13   $16     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      14   $16     Staggered    Average seat, cupholder Large screen, digital sound              No food
      15   $16     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      16   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      17   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      18   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food

Full factorial design:
 Profile price         sight                    comfort                audio.visual                 food
       1   $10     Staggered Average seat, no cupholder   Small screen, plain sound              No food
       2   $10     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
       3   $10     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
       4   $10     Staggered Average seat, no cupholder   Large screen, plain sound              No food
       5   $10     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
       6   $10     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
       7   $10     Staggered Average seat, no cupholder Large screen, digital sound              No food
       8   $10     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
       9   $10     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      10   $10     Staggered    Average seat, cupholder   Small screen, plain sound              No food
      11   $10     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      12   $10     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      13   $10     Staggered    Average seat, cupholder   Large screen, plain sound              No food
      14   $10     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      15   $10     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      16   $10     Staggered    Average seat, cupholder Large screen, digital sound              No food
      17   $10     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      18   $10     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      19   $10     Staggered      Large seat, cupholder   Small screen, plain sound              No food
      20   $10     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      21   $10     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      22   $10     Staggered      Large seat, cupholder   Large screen, plain sound              No food
      23   $10     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      24   $10     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      25   $10     Staggered      Large seat, cupholder Large screen, digital sound              No food
      26   $10     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      27   $10     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      28   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
      29   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      30   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      31   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
      32   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      33   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      34   $10 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
      35   $10 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      36   $10 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      37   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
      38   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      39   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      40   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
      41   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      42   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      43   $10 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
      44   $10 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      45   $10 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      46   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
      47   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      48   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      49   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
      50   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      51   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      52   $10 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
      53   $10 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      54   $10 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      55   $13     Staggered Average seat, no cupholder   Small screen, plain sound              No food
      56   $13     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      57   $13     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      58   $13     Staggered Average seat, no cupholder   Large screen, plain sound              No food
      59   $13     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      60   $13     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      61   $13     Staggered Average seat, no cupholder Large screen, digital sound              No food
      62   $13     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      63   $13     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      64   $13     Staggered    Average seat, cupholder   Small screen, plain sound              No food
      65   $13     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      66   $13     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      67   $13     Staggered    Average seat, cupholder   Large screen, plain sound              No food
      68   $13     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      69   $13     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      70   $13     Staggered    Average seat, cupholder Large screen, digital sound              No food
      71   $13     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      72   $13     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      73   $13     Staggered      Large seat, cupholder   Small screen, plain sound              No food
      74   $13     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      75   $13     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      76   $13     Staggered      Large seat, cupholder   Large screen, plain sound              No food
      77   $13     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      78   $13     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      79   $13     Staggered      Large seat, cupholder Large screen, digital sound              No food
      80   $13     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      81   $13     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      82   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
      83   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      84   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      85   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
      86   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      87   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      88   $13 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
      89   $13 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      90   $13 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      91   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
      92   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      93   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      94   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
      95   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      96   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      97   $13 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
      98   $13 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      99   $13 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     100   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
     101   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     102   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     103   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
     104   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     105   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     106   $13 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
     107   $13 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     108   $13 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
     109   $16     Staggered Average seat, no cupholder   Small screen, plain sound              No food
     110   $16     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
     111   $16     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
     112   $16     Staggered Average seat, no cupholder   Large screen, plain sound              No food
     113   $16     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
     114   $16     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
     115   $16     Staggered Average seat, no cupholder Large screen, digital sound              No food
     116   $16     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
     117   $16     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
     118   $16     Staggered    Average seat, cupholder   Small screen, plain sound              No food
     119   $16     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     120   $16     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
     121   $16     Staggered    Average seat, cupholder   Large screen, plain sound              No food
     122   $16     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     123   $16     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
     124   $16     Staggered    Average seat, cupholder Large screen, digital sound              No food
     125   $16     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
     126   $16     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     127   $16     Staggered      Large seat, cupholder   Small screen, plain sound              No food
     128   $16     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     129   $16     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     130   $16     Staggered      Large seat, cupholder   Large screen, plain sound              No food
     131   $16     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     132   $16     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     133   $16     Staggered      Large seat, cupholder Large screen, digital sound              No food
     134   $16     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     135   $16     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
     136   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
     137   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
     138   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
     139   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
     140   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
     141   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
     142   $16 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
     143   $16 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
     144   $16 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
     145   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
     146   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     147   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
     148   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
     149   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     150   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
     151   $16 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
     152   $16 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
     153   $16 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     154   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
     155   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     156   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     157   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
     158   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     159   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     160   $16 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
     161   $16 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     162   $16 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
> rm(cp, envir = .GlobalEnv)
> readLines(system.file("examples/profiles-movie.txt", package='radiant')) %>%
+   conjoint_profiles %>% summary
Generate conjoint profiles
Data      : price = c("$10","$13","$16") sight = c("Staggered","Not Staggered") comfort = c("Average seat, no cupholder","Average seat, cupholder","Large seat, cupholder") audio.visual = c("Small screen, plain sound","Large screen, plain sound","Large screen, digital sound") food = c("No food","Hot dogs and popcorn","Gourmet food")
# profiles: 18

Attributes and levels:
price = c("$10","$13","$16")
sight = c("Staggered","Not Staggered")
comfort = c("Average seat, no cupholder","Average seat, cupholder","Large seat, cupholder")
audio.visual = c("Small screen, plain sound","Large screen, plain sound","Large screen, digital sound")
food = c("No food","Hot dogs and popcorn","Gourmet food")

Fractional factorial design correlations:
             price sight comfort audio.visual food
price            1     0       0            0    0
sight            0     1       0            0    0
comfort          0     0       1            0    0
audio.visual     0     0       0            1    0
food             0     0       0            0    1

Fractional factorial design:
 Profile price         sight                    comfort                audio.visual                 food
       1   $10     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
       2   $10     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
       3   $10     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
       4   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
       5   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
       6   $10 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
       7   $13     Staggered Average seat, no cupholder   Large screen, plain sound              No food
       8   $13     Staggered    Average seat, cupholder   Small screen, plain sound              No food
       9   $13     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      10   $13 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      11   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      12   $13 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      13   $16     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      14   $16     Staggered    Average seat, cupholder Large screen, digital sound              No food
      15   $16     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      16   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      17   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      18   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food

Full factorial design:
 Profile price         sight                    comfort                audio.visual                 food
       1   $10     Staggered Average seat, no cupholder   Small screen, plain sound              No food
       2   $10     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
       3   $10     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
       4   $10     Staggered Average seat, no cupholder   Large screen, plain sound              No food
       5   $10     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
       6   $10     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
       7   $10     Staggered Average seat, no cupholder Large screen, digital sound              No food
       8   $10     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
       9   $10     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      10   $10     Staggered    Average seat, cupholder   Small screen, plain sound              No food
      11   $10     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      12   $10     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      13   $10     Staggered    Average seat, cupholder   Large screen, plain sound              No food
      14   $10     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      15   $10     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      16   $10     Staggered    Average seat, cupholder Large screen, digital sound              No food
      17   $10     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      18   $10     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      19   $10     Staggered      Large seat, cupholder   Small screen, plain sound              No food
      20   $10     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      21   $10     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      22   $10     Staggered      Large seat, cupholder   Large screen, plain sound              No food
      23   $10     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      24   $10     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      25   $10     Staggered      Large seat, cupholder Large screen, digital sound              No food
      26   $10     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      27   $10     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      28   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
      29   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      30   $10 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      31   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
      32   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      33   $10 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      34   $10 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
      35   $10 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      36   $10 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      37   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
      38   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      39   $10 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      40   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
      41   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      42   $10 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      43   $10 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
      44   $10 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      45   $10 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      46   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
      47   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      48   $10 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      49   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
      50   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      51   $10 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      52   $10 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
      53   $10 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      54   $10 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      55   $13     Staggered Average seat, no cupholder   Small screen, plain sound              No food
      56   $13     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      57   $13     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      58   $13     Staggered Average seat, no cupholder   Large screen, plain sound              No food
      59   $13     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      60   $13     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      61   $13     Staggered Average seat, no cupholder Large screen, digital sound              No food
      62   $13     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      63   $13     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      64   $13     Staggered    Average seat, cupholder   Small screen, plain sound              No food
      65   $13     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      66   $13     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      67   $13     Staggered    Average seat, cupholder   Large screen, plain sound              No food
      68   $13     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      69   $13     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      70   $13     Staggered    Average seat, cupholder Large screen, digital sound              No food
      71   $13     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      72   $13     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
      73   $13     Staggered      Large seat, cupholder   Small screen, plain sound              No food
      74   $13     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      75   $13     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
      76   $13     Staggered      Large seat, cupholder   Large screen, plain sound              No food
      77   $13     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      78   $13     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
      79   $13     Staggered      Large seat, cupholder Large screen, digital sound              No food
      80   $13     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
      81   $13     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
      82   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
      83   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
      84   $13 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
      85   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
      86   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
      87   $13 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
      88   $13 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
      89   $13 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
      90   $13 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
      91   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
      92   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
      93   $13 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
      94   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
      95   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
      96   $13 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
      97   $13 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
      98   $13 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
      99   $13 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     100   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
     101   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     102   $13 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     103   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
     104   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     105   $13 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     106   $13 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
     107   $13 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     108   $13 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
     109   $16     Staggered Average seat, no cupholder   Small screen, plain sound              No food
     110   $16     Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
     111   $16     Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
     112   $16     Staggered Average seat, no cupholder   Large screen, plain sound              No food
     113   $16     Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
     114   $16     Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
     115   $16     Staggered Average seat, no cupholder Large screen, digital sound              No food
     116   $16     Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
     117   $16     Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
     118   $16     Staggered    Average seat, cupholder   Small screen, plain sound              No food
     119   $16     Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     120   $16     Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
     121   $16     Staggered    Average seat, cupholder   Large screen, plain sound              No food
     122   $16     Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     123   $16     Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
     124   $16     Staggered    Average seat, cupholder Large screen, digital sound              No food
     125   $16     Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
     126   $16     Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     127   $16     Staggered      Large seat, cupholder   Small screen, plain sound              No food
     128   $16     Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     129   $16     Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     130   $16     Staggered      Large seat, cupholder   Large screen, plain sound              No food
     131   $16     Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     132   $16     Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     133   $16     Staggered      Large seat, cupholder Large screen, digital sound              No food
     134   $16     Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     135   $16     Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
     136   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound              No food
     137   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound Hot dogs and popcorn
     138   $16 Not Staggered Average seat, no cupholder   Small screen, plain sound         Gourmet food
     139   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound              No food
     140   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound Hot dogs and popcorn
     141   $16 Not Staggered Average seat, no cupholder   Large screen, plain sound         Gourmet food
     142   $16 Not Staggered Average seat, no cupholder Large screen, digital sound              No food
     143   $16 Not Staggered Average seat, no cupholder Large screen, digital sound Hot dogs and popcorn
     144   $16 Not Staggered Average seat, no cupholder Large screen, digital sound         Gourmet food
     145   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound              No food
     146   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     147   $16 Not Staggered    Average seat, cupholder   Small screen, plain sound         Gourmet food
     148   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound              No food
     149   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     150   $16 Not Staggered    Average seat, cupholder   Large screen, plain sound         Gourmet food
     151   $16 Not Staggered    Average seat, cupholder Large screen, digital sound              No food
     152   $16 Not Staggered    Average seat, cupholder Large screen, digital sound Hot dogs and popcorn
     153   $16 Not Staggered    Average seat, cupholder Large screen, digital sound         Gourmet food
     154   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound              No food
     155   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound Hot dogs and popcorn
     156   $16 Not Staggered      Large seat, cupholder   Small screen, plain sound         Gourmet food
     157   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound              No food
     158   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound Hot dogs and popcorn
     159   $16 Not Staggered      Large seat, cupholder   Large screen, plain sound         Gourmet food
     160   $16 Not Staggered      Large seat, cupholder Large screen, digital sound              No food
     161   $16 Not Staggered      Large seat, cupholder Large screen, digital sound Hot dogs and popcorn
     162   $16 Not Staggered      Large seat, cupholder Large screen, digital sound         Gourmet food
>
>
>
> cleanEx()
> nameEx("summary.correlation_")
> ### * summary.correlation_
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.correlation_
> ### Title: Summary method for the correlation function
> ### Aliases: summary.correlation_
>
> ### ** Examples
>
> result <- correlation("diamonds",c("price","carat","clarity"))
> summary(result, cutoff = .3)
Correlation
Data     : diamonds
Variables: price, carat, clarity
Null hyp.: variables x and y are not correlated
Alt. hyp.: variables x and y are correlated

Correlation matrix:
        price carat
carat    0.93
clarity       -0.36

p.values:
        price carat
carat   0
clarity       0
> diamonds %>% correlation("price:clarity") %>% summary
Correlation
Data     : -----
Variables: price:clarity
Null hyp.: variables x and y are not correlated
Alt. hyp.: variables x and y are correlated

Correlation matrix:
        price carat
carat    0.93
clarity -0.16 -0.36

p.values:
        price carat
carat   0
clarity 0     0
>
>
>
> cleanEx()
> nameEx("summary.cross_tabs")
> ### * summary.cross_tabs
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.cross_tabs
> ### Title: Summary method for the cross_tabs function
> ### Aliases: summary.cross_tabs
>
> ### ** Examples
>
> result <- cross_tabs("newspaper", "Income", "Newspaper")
> summary(result, check = c("observed","expected","chi_sq"))
Cross-tabs
Data     : newspaper
Variables: Income, Newspaper
Null hyp.: there is no association between Income and Newspaper
Alt. hyp.: there is an association between Income and Newspaper

Observed:
            WS Journal USA Today Total
Low Income          83       276   359
High Income        180        41   221
Total              263       317   580

Expected: (row total x column total) / total
            WS Journal USA Today Total
Low Income      162.79    196.21   359
High Income     100.21    120.79   221
Total           263.00    317.00   580

Contribution to chi-squared: (o - e)^2 / e
            WS Journal USA Today  Total
Low Income       39.11     32.45  71.55
High Income      63.53     52.70 116.23
Total           102.63     85.15 187.78

Chi-squared: 187.783 df(1), p.value < .001

0.0 % of cells have expected values below 5> newspaper %>% cross_tabs("Income", "Newspaper") %>% summary("observed")
Cross-tabs
Data     : -----
Variables: Income, Newspaper
Null hyp.: there is no association between Income and Newspaper
Alt. hyp.: there is an association between Income and Newspaper

Observed:
            WS Journal USA Today Total
Low Income          83       276   359
High Income        180        41   221
Total              263       317   580

Chi-squared: 187.783 df(1), p.value < .001

0.0 % of cells have expected values below 5>
>
>
> cleanEx()
> nameEx("summary.explore")
> ### * summary.explore
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.explore
> ### Title: Summary method for the explore function
> ### Aliases: summary.explore
>
> ### ** Examples
>
> result <- explore("diamonds", "price:x")
> summary(result)
Data      : diamonds
Functions :  mean
Top       :  Function

 variable     mean
    price 3907.186
    carat    0.794
    depth   61.753
    table   57.465
        x    5.722
> result <- explore("diamonds", "price", byvar = "cut", fun = c("length", "skew"))
> summary(result)
Data      : diamonds
Grouped by:  cut
Functions :  n skew
Top       :  Function

       cut variable    n  skew
      Fair    price  101 1.574
      Good    price  275 1.489
 Very Good    price  677 1.601
   Premium    price  771 1.413
     Ideal    price 1176 1.799
> diamonds %>% explore("price:x") %>% summary
Data      : -----
Functions :  mean
Top       :  Function

 variable     mean
    price 3907.186
    carat    0.794
    depth   61.753
    table   57.465
        x    5.722
> diamonds %>% explore("price", byvar = "cut", fun = c("length", "skew")) %>% summary
Data      : -----
Grouped by:  cut
Functions :  n skew
Top       :  Function

       cut variable    n  skew
      Fair    price  101 1.574
      Good    price  275 1.489
 Very Good    price  677 1.601
   Premium    price  771 1.413
     Ideal    price 1176 1.799
>
>
>
> cleanEx()
> nameEx("summary.full_factor")
> ### * summary.full_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.full_factor
> ### Title: Summary method for the full_factor function
> ### Aliases: summary.full_factor
>
> ### ** Examples
>
> result <- full_factor("diamonds",c("price","carat","depth","table","x"))
> summary(result)
Factor analysis
Data        : diamonds
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
price 0.96  0.04
carat 0.99  0.05
depth 0.07 -0.83
table 0.16  0.79
x     0.97  0.09
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
> summary(result, cutoff = 0, fsort = FALSE)
Factor analysis
Data        : diamonds
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
price 0.96  0.04
carat 0.99  0.05
depth 0.07 -0.83
table 0.16  0.79
x     0.97  0.09
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
> summary(result, cutoff = 0, fsort = TRUE)
Factor analysis
Data        : diamonds
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
carat 0.99  0.05
x     0.97  0.09
price 0.96  0.04
depth 0.07 -0.83
table 0.16  0.79
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
> summary(result, cutoff = .5, fsort = TRUE)
Factor analysis
Data        : diamonds
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
carat 0.99
x     0.97
price 0.96
depth      -0.83
table       0.79
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
> diamonds %>% full_factor(c("price","carat","depth","table","x")) %>% summary
Factor analysis
Data        : -----
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
price 0.96  0.04
carat 0.99  0.05
depth 0.07 -0.83
table 0.16  0.79
x     0.97  0.09
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
> diamonds %>% full_factor(c("price","carat","depth","table","x")) %>% summary(cutoff = .5)
Factor analysis
Data        : -----
Variables   : price, carat, depth, table, x
# factors   : 2
Method      : PCA
Rotation    : varimax
Observations: 3000

Factor loadings:
       PC1   PC2
price 0.96
carat 0.99
depth      -0.83
table       0.79
x     0.97
              PC1  PC2
Eigenvalues  2.88 1.32
Variance %   0.58 0.26
Cumulative % 0.58 0.84

Attribute communalities:

price 0.92
carat 0.98
depth 0.69
table 0.65
x     0.96

Factor scores (max 10 shown):
   PC1   PC2
 -1.06 -0.01
 -0.90 -0.81
 -1.00 -0.41
 -1.08  0.79
 -0.78 -0.20
 -0.30 -1.32
  0.13 -0.36
  0.29  0.03
 -0.48 -0.83
  0.42 -0.82
>
>
>
> cleanEx()
> nameEx("summary.glm_reg")
> ### * summary.glm_reg
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.glm_reg
> ### Title: Summary method for the glm_reg function
> ### Aliases: summary.glm_reg
>
> ### ** Examples
>
> result <- glm_reg("titanic", "survived", "pclass", lev = "Yes")
> summary(result, test_var = "pclass")
Generalized linear model (glm)
Link function: logit
Data         : titanic
Dependent variable   : survived
Level                : Yes in survived
Independent variables: pclass

              coefficient std.error z.value p.value
  (Intercept)       0.486     0.115   4.242  < .001 ***
 pclass > 2nd      -0.770     0.167  -4.611  < .001 ***
 pclass > 3rd      -1.557     0.143 -10.860  < .001 ***

Pseudo R-squared: 0.073
Log-likelihood: -806.629, AIC: 1619.259, BIC: 1634.79
Chi-squared: 127.765 df(2), p.value < .001
Nr obs:  1309

Model 1: survived ~ 1
Model 2: survived ~ pclass
Pseudo R-squared, Model 1 vs 2: 0 0.073
Chi-statistic: 127.765 df(2), p.value < .001> res <- glm_reg("titanic", "survived", c("pclass","sex"), int_var="pclass:sex", lev="Yes")
> summary(res, sum_check = c("vif","confint","odds"))
Generalized linear model (glm)
Link function: logit
Data         : titanic
Dependent variable   : survived
Level                : Yes in survived
Independent variables: pclass, sex

                         coefficient std.error z.value p.value
             (Intercept)       3.325     0.455   7.309  < .001 ***
            pclass > 2nd      -1.267     0.549  -2.309   0.021   *
            pclass > 3rd      -3.362     0.475  -7.081  < .001 ***
              sex > male      -3.985     0.481  -8.277  < .001 ***
 pclass > 2nd:sex > male       0.162     0.610   0.265   0.791
 pclass > 3rd:sex > male       2.304     0.516   4.467  < .001 ***

Pseudo R-squared: 0.305
Log-likelihood: -605.025, AIC: 1222.05, BIC: 1253.112
Chi-squared: 530.974 df(5), p.value < .001
Nr obs:  1309

Variance Inflation Factors
    pclass:sex pclass    sex
VIF     34.731 21.780 10.354
Rsq      0.971  0.954  0.903

Waiting for profiling to be done...
                        coefficient   2.5%  97.5%   +/-
(Intercept)                   3.325  2.539  4.362 1.037
pclass > 2nd                 -1.267 -2.439 -0.240 1.027
pclass > 3rd                 -3.362 -4.428 -2.527 0.835
sex > male                   -3.985 -5.061 -3.135 0.850
pclass > 2nd:sex > male       0.162 -0.997  1.435 1.273
pclass > 3rd:sex > male       2.304  1.373  3.433 1.129

                          odds   2.5%  97.5%    +/-
(Intercept)             27.799 12.672 78.424 65.752
pclass > 2nd             0.282  0.087  0.787  0.700
pclass > 3rd             0.035  0.012  0.080  0.068
sex > male               0.019  0.006  0.044  0.038
pclass > 2nd:sex > male  1.176  0.369  4.200  3.831
pclass > 3rd:sex > male 10.014  3.947 30.962 27.015

> titanic %>% glm_reg("survived", c("pclass","sex","age"), lev = "Yes") %>% summary("vif")
Generalized linear model (glm)
Link function: logit
Data         : -----
Dependent variable   : survived
Level                : Yes in survived
Independent variables: pclass, sex, age

              coefficient std.error z.value p.value
  (Intercept)       3.522     0.327  10.781  < .001 ***
 pclass > 2nd      -1.281     0.226  -5.678  < .001 ***
 pclass > 3rd      -2.290     0.226 -10.140  < .001 ***
   sex > male      -2.498     0.166 -15.044  < .001 ***
          age      -0.034     0.006  -5.433  < .001 ***

Pseudo R-squared: 0.306
Log-likelihood: -491.227, AIC: 992.453, BIC: 1017.217
Chi-squared: 432.167 df(4), p.value < .001
Nr obs:  1046

Variance Inflation Factors
    pclass   age   sex
VIF  1.415 1.354 1.052
Rsq  0.293 0.262 0.049

>
>
>
> cleanEx()
> nameEx("summary.hier_clus")
> ### * summary.hier_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.hier_clus
> ### Title: Summary method for the hier_clus function
> ### Aliases: summary.hier_clus
>
> ### ** Examples
>
> result <- hier_clus("shopping", vars = c("v1:v6"))
> summary(result)
Hierarchical cluster analysis
Data        : shopping
Variables   : v1:v6
Method      : ward.D
Distance    : sq.euclidian
Observations: 20
>
>
>
> cleanEx()
> nameEx("summary.kmeans_clus")
> ### * summary.kmeans_clus
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.kmeans_clus
> ### Title: Summary method for kmeans_clus
> ### Aliases: summary.kmeans_clus
>
> ### ** Examples
>
> result <- kmeans_clus("shopping", vars = c("v1:v6"))
> summary(result)
K-means cluster analysis
Data        : shopping
Variables   : v1:v6
Method      : ward.D
Distance    : sq.euclidian
Observations: 20
Generated   : 2 clusters of sizes 8, 12

Cluster means:
             v1    v2    v3    v4    v5    v6
Cluster 1 5.750 3.625 6.000 3.125 1.875 3.875
Cluster 2 2.583 4.417 2.583 4.750 4.500 4.667

Percentage of within cluster variance accounted for by each cluster:

Cluster 1 17.66%
Cluster 2 82.34%

Between cluster variance accounts for 40.52% of the
total variance in the data (higher is better).> shopping %>% kmeans_clus(vars = c("v1:v6"), nr_clus = 3) %>% summary
K-means cluster analysis
Data        : -----
Variables   : v1:v6
Method      : ward.D
Distance    : sq.euclidian
Observations: 20
Generated   : 3 clusters of sizes 8, 6, 6

Cluster means:
             v1    v2    v3    v4    v5    v6
Cluster 1 5.750 3.625 6.000 3.125 1.875 3.875
Cluster 2 1.667 3.000 1.833 3.500 5.500 3.333
Cluster 3 3.500 5.833 3.333 6.000 3.500 6.000

Percentage of within cluster variance accounted for by each cluster:

Cluster 1 40.31%
Cluster 2 25.98%
Cluster 3 33.71%

Between cluster variance accounts for 73.93% of the
total variance in the data (higher is better).>
>
>
> cleanEx()
> nameEx("summary.mds")
> ### * summary.mds
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.mds
> ### Title: Summary method for the mds function
> ### Aliases: summary.mds
>
> ### ** Examples
>
> result <- mds("city", "from", "to", "distance")
> summary(result)
(Dis)similarity based brand map (MDS)
Data        : city
Variables   : from, to, distance
# dimensions: 2
Method      : Metric
Observations: 45

Original distance data:
        Boston   NY   DC Miami Chicago Seattle   SF   LA
NY         206
DC         429  233
Miami     1504 1308 1075
Chicago    963  802  671  1329
Seattle   2976 2815 2684  3273    2013
SF        3095 2934 2799  3053    2142     808
LA        2979 2786 2631  2687    2054    1131  379
Denver    1949 1771 1616  2037     996    1307 1235 1059

Recovered distance data:
        Boston     NY     DC  Miami Chicago Seattle     SF     LA
NY       216.2
DC       424.3  209.3
Miami   1481.0 1320.5 1159.8
Chicago  964.2  781.6  649.7 1431.6
Seattle 2950.1 2814.8 2720.0 3271.4  2077.3
SF      3103.3 2929.1 2787.1 3054.3  2147.6   777.6
LA      2993.0 2800.5 2634.9 2728.9  2030.3  1207.1  488.2
Denver  1930.7 1750.8 1606.5 2015.2   969.3  1256.5 1180.7 1089.0

Coordinates:
          Dim  1  Dim  2
Boston  -1348.67 -462.40
NY      -1198.87 -306.55
DC      -1076.99 -136.43
Miami   -1226.94 1013.63
Chicago  -428.45 -174.60
Seattle  1596.16 -639.31
SF       1697.23  131.69
LA       1464.05  560.58
Denver    522.49   13.40

Stress: 0.02> summary(result, dec = 2)
(Dis)similarity based brand map (MDS)
Data        : city
Variables   : from, to, distance
# dimensions: 2
Method      : Metric
Observations: 45

Original distance data:
        Boston   NY   DC Miami Chicago Seattle   SF   LA
NY         206
DC         429  233
Miami     1504 1308 1075
Chicago    963  802  671  1329
Seattle   2976 2815 2684  3273    2013
SF        3095 2934 2799  3053    2142     808
LA        2979 2786 2631  2687    2054    1131  379
Denver    1949 1771 1616  2037     996    1307 1235 1059

Recovered distance data:
         Boston      NY      DC   Miami Chicago Seattle      SF      LA
NY       216.17
DC       424.34  209.27
Miami   1481.04 1320.47 1159.80
Chicago  964.17  781.64  649.65 1431.60
Seattle 2950.14 2814.77 2720.03 3271.40 2077.26
SF      3103.29 2929.07 2787.14 3054.27 2147.64  777.59
LA      2992.97 2800.55 2634.90 2728.86 2030.29 1207.14  488.18
Denver  1930.70 1750.84 1606.47 2015.18  969.35 1256.50 1180.68 1089.01

Coordinates:
           Dim  1   Dim  2
Boston  -1348.668 -462.401
NY      -1198.874 -306.547
DC      -1076.986 -136.432
Miami   -1226.939 1013.628
Chicago  -428.455 -174.603
Seattle  1596.159 -639.308
SF       1697.228  131.686
LA       1464.047  560.580
Denver    522.487   13.396

Stress: 0.0197> city %>% mds("from", "to", "distance") %>% summary
(Dis)similarity based brand map (MDS)
Data        : -----
Variables   : from, to, distance
# dimensions: 2
Method      : Metric
Observations: 45

Original distance data:
        Boston   NY   DC Miami Chicago Seattle   SF   LA
NY         206
DC         429  233
Miami     1504 1308 1075
Chicago    963  802  671  1329
Seattle   2976 2815 2684  3273    2013
SF        3095 2934 2799  3053    2142     808
LA        2979 2786 2631  2687    2054    1131  379
Denver    1949 1771 1616  2037     996    1307 1235 1059

Recovered distance data:
        Boston     NY     DC  Miami Chicago Seattle     SF     LA
NY       216.2
DC       424.3  209.3
Miami   1481.0 1320.5 1159.8
Chicago  964.2  781.6  649.7 1431.6
Seattle 2950.1 2814.8 2720.0 3271.4  2077.3
SF      3103.3 2929.1 2787.1 3054.3  2147.6   777.6
LA      2993.0 2800.5 2634.9 2728.9  2030.3  1207.1  488.2
Denver  1930.7 1750.8 1606.5 2015.2   969.3  1256.5 1180.7 1089.0

Coordinates:
          Dim  1  Dim  2
Boston  -1348.67 -462.40
NY      -1198.87 -306.55
DC      -1076.99 -136.43
Miami   -1226.94 1013.63
Chicago  -428.45 -174.60
Seattle  1596.16 -639.31
SF       1697.23  131.69
LA       1464.05  560.58
Denver    522.49   13.40

Stress: 0.02>
>
>
> cleanEx()
> nameEx("summary.pivotr")
> ### * summary.pivotr
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.pivotr
> ### Title: Summary method for pivotr
> ### Aliases: summary.pivotr
>
> ### ** Examples
>
> pivotr("diamonds", cvars = "cut") %>% summary
Pivot table
Data       : diamonds
Categorical: cut

       cut    n
      Fair  101
      Good  275
 Very Good  677
   Premium  771
     Ideal 1176
     Total 3000

> pivotr("diamonds", cvars = "cut") %>% summary
Pivot table
Data       : diamonds
Categorical: cut

       cut    n
      Fair  101
      Good  275
 Very Good  677
   Premium  771
     Ideal 1176
     Total 3000

> pivotr("diamonds", cvars = "cut:clarity", nvar = "price") %>% summary
Pivot table
Data       : diamonds
Categorical: cut clarity
Numeric    : price
Function   : mean

 clarity     Fair     Good Very Good  Premium    Ideal    Total
      I1 2730.167 4333.500  3864.167 4932.231 6078.200 4194.775
     SI2 5893.964 5280.919  5045.621 5568.019 4435.673 5100.189
     SI1 4273.069 3757.022  4277.544 4113.811 3758.125 3998.577
     VS2 3292.000 3925.481  3950.947 4522.914 3306.290 3822.967
     VS1 5110.769 3740.697  3889.475 4461.333 3189.362 3789.181
    VVS2 2030.500 4378.167  2525.193 3580.581 3665.181 3337.820
    VVS1 6761.500 3889.333  1945.875 1426.692 2960.594 2608.460
      IF 3205.000  817.250  4675.867 2361.333 1961.344 2411.697
   Total 4505.238 4130.433  3959.916 4369.409 3470.224 3907.186

>
>
>
> cleanEx()
> nameEx("summary.pmap")
> ### * summary.pmap
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.pmap
> ### Title: Summary method for the pmap function
> ### Aliases: summary.pmap
>
> ### ** Examples
>
> result <- pmap("computer","brand","high_end:business")
> summary(result)
Attribute based brand map
Data        : computer
Attributes  : high_end, stylish, modern, value, dated, innovative, business
# dimensions: 2
Rotation    : varimax
Observations: 5

Brand - Factor scores:
          PC1   PC2
Apple    1.30  0.09
Dell    -0.32 -0.21
Gateway -1.19 -0.93
HP      -0.52  1.65
Sony     0.73 -0.60

Attribute - Factor loadings:
             PC1   PC2
high_end    0.94 -0.16
stylish     0.98  0.06
modern      0.99  0.03
value      -0.93 -0.28
dated      -0.97  0.21
innovative  0.86  0.19
business    0.02  0.99

Fit measures:
              PC1  PC2
Eigenvalues  5.35 1.16
Variance %   0.76 0.17
Cumulative % 0.76 0.93

Attribute communalities:
high_end   0.91
stylish    0.97
modern     0.97
value      0.94
dated      0.99
innovative 0.77
business   0.97
> summary(result, cutoff = .3)
Attribute based brand map
Data        : computer
Attributes  : high_end, stylish, modern, value, dated, innovative, business
# dimensions: 2
Rotation    : varimax
Observations: 5

Brand - Factor scores:
          PC1   PC2
Apple    1.30  0.09
Dell    -0.32 -0.21
Gateway -1.19 -0.93
HP      -0.52  1.65
Sony     0.73 -0.60

Attribute - Factor loadings:
             PC1  PC2
high_end    0.94
stylish     0.98
modern      0.99
value      -0.93
dated      -0.97
innovative  0.86
business         0.99

Fit measures:
              PC1  PC2
Eigenvalues  5.35 1.16
Variance %   0.76 0.17
Cumulative % 0.76 0.93

Attribute communalities:
high_end   0.91
stylish    0.97
modern     0.97
value      0.94
dated      0.99
innovative 0.77
business   0.97
> result <- pmap("computer","brand","high_end:dated", pref = c("innovative","business"))
> summary(result)
Attribute based brand map
Data        : computer
Attributes  : high_end, stylish, modern, value, dated
Preferences : innovative, business
# dimensions: 2
Rotation    : varimax
Observations: 5

Brand - Factor scores:
          PC1   PC2
Apple    0.73  0.95
Dell     0.77 -1.22
Gateway -0.83 -0.93
HP      -1.32  0.67
Sony     0.66  0.53

Attribute - Factor loadings:
           PC1   PC2
high_end  0.89  0.44
stylish   0.58  0.81
modern    0.77  0.62
value    -0.44 -0.89
dated    -0.82 -0.55

Preference correlations:
             PC1  PC2 communalities
innovative  0.44 0.72          0.70
business   -0.38 0.44          0.34

Fit measures:
              PC1  PC2
Eigenvalues  2.60 2.33
Variance %   0.52 0.47
Cumulative % 0.52 0.99

Attribute communalities:
high_end 0.99
stylish  0.99
modern   0.98
value    0.99
dated    0.98
> computer %>% pmap("brand","high_end:dated", pref = c("innovative","business")) %>%
+   summary
Attribute based brand map
Data        : -----
Attributes  : high_end, stylish, modern, value, dated
Preferences : innovative, business
# dimensions: 2
Rotation    : varimax
Observations: 5

Brand - Factor scores:
          PC1   PC2
Apple    0.73  0.95
Dell     0.77 -1.22
Gateway -0.83 -0.93
HP      -1.32  0.67
Sony     0.66  0.53

Attribute - Factor loadings:
           PC1   PC2
high_end  0.89  0.44
stylish   0.58  0.81
modern    0.77  0.62
value    -0.44 -0.89
dated    -0.82 -0.55

Preference correlations:
             PC1  PC2 communalities
innovative  0.44 0.72          0.70
business   -0.38 0.44          0.34

Fit measures:
              PC1  PC2
Eigenvalues  2.60 2.33
Variance %   0.52 0.47
Cumulative % 0.52 0.99

Attribute communalities:
high_end 0.99
stylish  0.99
modern   0.98
value    0.99
dated    0.98
>
>
>
> cleanEx()
> nameEx("summary.pre_factor")
> ### * summary.pre_factor
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.pre_factor
> ### Title: Summary method for the pre_factor function
> ### Aliases: summary.pre_factor
>
> ### ** Examples
>
> result <- pre_factor("diamonds",c("price","carat","table"))
> summary(result)
Pre-factor analysis diagnostics
Data        : diamonds
Variables   : price, carat, table
Observations: 3000

Bartlett test
Null hyp.: variables are not correlated
Alt. hyp.: variables are correlated
Chi-square: 6029.81 df(3), p.value < .001

KMO test:  0.51

Variable collinearity:
       Rsq
price 0.86
carat 0.86
table 0.05

 Factor Eigenvalues Variance % Cumulative %
      1        1.98       0.66         0.66
      2        0.95       0.32         0.98
      3        0.07       0.02         1.00
> diamonds %>% pre_factor(c("price","carat","table")) %>% summary
Pre-factor analysis diagnostics
Data        : -----
Variables   : price, carat, table
Observations: 3000

Bartlett test
Null hyp.: variables are not correlated
Alt. hyp.: variables are correlated
Chi-square: 6029.81 df(3), p.value < .001

KMO test:  0.51

Variable collinearity:
       Rsq
price 0.86
carat 0.86
table 0.05

 Factor Eigenvalues Variance % Cumulative %
      1        1.98       0.66         0.66
      2        0.95       0.32         0.98
      3        0.07       0.02         1.00
> result <- pre_factor("computer","high_end:business")
> summary(result)
Data should have more observations than variables.
Please reduce the number of variables.>
>
>
> cleanEx()
> nameEx("summary.regression")
> ### * summary.regression
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.regression
> ### Title: Summary method for the regression function
> ### Aliases: summary.regression
>
> ### ** Examples
>
> result <- regression("diamonds", "price", c("carat","clarity"))
> summary(result, sum_check = c("rmse","sumsquares","vif","confint"), test_var = "clarity")
Linear regression (OLS)
Data     : diamonds
Dependent variable   : price
Independent variables: carat, clarity

                coefficient std.error t.value p.value
    (Intercept)   -6780.993   204.952 -33.086  < .001 ***
          carat    8438.030    51.101 165.125  < .001 ***
  clarity > SI2    2790.760   201.395  13.857  < .001 ***
  clarity > SI1    3608.531   200.508  17.997  < .001 ***
  clarity > VS2    4249.906   201.607  21.080  < .001 ***
  clarity > VS1    4461.956   204.592  21.809  < .001 ***
 clarity > VVS2    5109.476   210.207  24.307  < .001 ***
 clarity > VVS1    5027.669   214.251  23.466  < .001 ***
   clarity > IF    5265.170   233.658  22.534  < .001 ***

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

R-squared: 0.904,  Adjusted R-squared: 0.904
F-statistic: 3530.024 df(9,2991), p.value < .001
Nr obs: 3000

Prediction error (RMSE):  1224.329

Sum of squares:
             df          SS
Regression    8 42458933807
Error      2991  4496947463
Total      2999 46955881270

Variance Inflation Factors
    carat clarity
VIF  1.17    1.17
Rsq  0.14    0.14

               coefficient      2.5%     97.5%     +/-
(Intercept)      -6780.993 -7182.855 -6379.131 401.862
carat             8438.030  8337.834  8538.227 100.197
clarity > SI2     2790.760  2395.873  3185.646 394.886
clarity > SI1     3608.531  3215.384  4001.679 393.148
clarity > VS2     4249.906  3854.604  4645.208 395.302
clarity > VS1     4461.956  4060.801  4863.111 401.155
clarity > VVS2    5109.476  4697.311  5521.640 412.164
clarity > VVS1    5027.669  4607.574  5447.764 420.095
clarity > IF      5265.170  4807.024  5723.317 458.147

Model 1: price ~ carat
Model 2: price ~ carat + clarity
R-squared, Model 1 vs 2: 0.86 0.904
F-statistic: 197.585 df(2998,2991), p.value < .001> result <- regression("shopping", "v1", c("v2","v3"))
> summary(result, test_var = "v2")
Linear regression (OLS)
Data     : shopping
Dependent variable   : v1
Independent variables: v2, v3

             coefficient std.error t.value p.value
 (Intercept)       0.321     0.930   0.346   0.734
          v2       0.095     0.177   0.538   0.597
          v3       0.794     0.124   6.401  < .001 ***

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

R-squared: 0.707,  Adjusted R-squared: 0.672
F-statistic: 20.505 df(3,17), p.value < .001
Nr obs: 20

Model 1: v1 ~ v3
Model 2: v1 ~ v2 + v3
R-squared, Model 1 vs 2: 0.702 0.707
F-statistic: 0.29 df(18,17), p.value 0.597> shopping %>% regression("v1", "v2:v6") %>% summary
Linear regression (OLS)
Data     : -----
Dependent variable   : v1
Independent variables: v2, v3, v4, v5, v6

             coefficient std.error t.value p.value
 (Intercept)       4.300     1.292   3.329   0.005  **
          v2       0.035     0.151   0.235   0.818
          v3       0.472     0.134   3.515   0.003  **
          v4       0.238     0.160   1.486   0.159
          v5      -0.609     0.145  -4.197   0.001 ***
          v6      -0.307     0.154  -1.993   0.066   .

Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

R-squared: 0.89,  Adjusted R-squared: 0.851
F-statistic: 22.686 df(6,14), p.value < .001
Nr obs: 20

>
>
>
> cleanEx()
> nameEx("summary.sample_size")
> ### * summary.sample_size
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.sample_size
> ### Title: Summary method for the sample_size function
> ### Aliases: summary.sample_size
>
> ### ** Examples
>
> result <- sample_size(type = "mean", err_mean = 2, sd_mean = 10)
> summary(result)
Sample size calculation
Calculation type     : Mean
Acceptable Error     : 2
Sample std. deviation: 10
Confidence level     : 1.96
Incidence rate       : 1
Response rate        : 1
Population correction: None

Required sample size     : 97
Required contact attempts: 97

Choose a Z-value:
80%	 1.28
85%	 1.44
90%	 1.64
95%	 1.96
99%	 2.58
>
>
>
> cleanEx()
> nameEx("summary.sampling")
> ### * summary.sampling
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.sampling
> ### Title: Summary method for the sampling function
> ### Aliases: summary.sampling
>
> ### ** Examples
>
> set.seed(1234)
> result <- sampling("rndnames", "Names", 10)
> summary(result)
Sampling (simple random)
Data       : rndnames
ID variable: Names
Sample size: 10

Selected:
               Names rnd_number
        Jarrod Jolly      0.992
 Matilda Mcgillivray      0.926
      Beau Bannerman      0.923
        Tomas Tupper      0.915
     Bernardine Bohr      0.900
          Nona Nosal      0.899
        Janey Jetton      0.896
     Amberly Ahumada      0.893
        Latisha Lutz      0.865
           Jc Julius      0.861

Sampling frame:
               Names rnd_number
      Ervin Escalona      0.114
      Allan Ammerman      0.622
   Milton Mothershed      0.609
        Deshawn Dawn      0.623
           Jc Julius      0.861
        Denver Delph      0.640
         Jed Jameson      0.009
      Zachariah Zeno      0.233
         Cyril Class      0.666
        Lauren Lukas      0.514
       Hershel Hentz      0.694
     Darrell Draheim      0.545
        Shawn Salmon      0.283
      Beau Bannerman      0.923
      Stephen Slough      0.292
        Cole Cropper      0.837
  Stacy Schrecengost      0.286
        Kent Keasler      0.267
          Omar Ogden      0.187
        Perry Pearcy      0.232
    Courtney Carmody      0.317
        Derek Dorsch      0.303
     Napoleon Norman      0.159
        Rodney Regis      0.040
         Hubert Hyer      0.219
       Foster Fugate      0.811
      Emery Etchison      0.526
        Tomas Tupper      0.915
        Robin Ramsay      0.831
          Tom Tomita      0.046
     Travis Thornley      0.456
        Hank Heavner      0.265
          Ahmed Avey      0.305
  Sanford Steinfeldt      0.507
   Douglass Daddario      0.181
       Dominic Duhon      0.760
      Emanuel Esquer      0.201
    Federico Fillion      0.259
        Jarrod Jolly      0.992
  Lawrence Levasseur      0.807
       Kurtis Kieser      0.553
           Ty Troyer      0.646
         Bryce Billy      0.312
         Brooks Buie      0.622
        Maximo Manzi      0.330
           Lino Luse      0.502
      Mark Mccloskey      0.677
         Tory Tilman      0.485
          Angel Aker      0.244
         Jean Joseph      0.765
       Susann Sauers      0.074
     Deborah Deckard      0.310
          Many Mcvey      0.717
     Dalene Dubreuil      0.505
  Gabriella Gurganus      0.153
      Kellie Kealoha      0.504
           Amie Asay      0.494
       Robbi Randell      0.751
     Jacquelin James      0.175
    Jennefer Jansson      0.848
        Latisha Lutz      0.865
       Glenda Garris      0.042
      Elana Eslinger      0.317
    Margene Martelli      0.014
       Breana Ballou      0.239
    Christal Chaires      0.706
      Carlotta Clack      0.308
       Doretha Dever      0.509
           Eden Epps      0.052
        Essie Elwood      0.565
      Antonina Alers      0.121
     Amberly Ahumada      0.893
 Bernadette Basnight      0.015
 Christine Chevalier      0.783
       Shemeka Solar      0.090
   Antonietta Alfano      0.519
   Rozanne Raulerson      0.384
          Willa Well      0.070
     Jazmin Jeffcoat      0.321
     Marcell Meisner      0.668
 Matilda Mcgillivray      0.926
   Davida Derrickson      0.472
    Clarita Calandra      0.143
     Angelita Archer      0.544
       Dorinda Dehne      0.196
          Nona Nosal      0.899
       Jesusa Jordon      0.389
       Elinore Elmer      0.311
          Leanne Lew      0.160
        Janey Jetton      0.896
      Linette Lavery      0.166
     Bernardine Bohr      0.900
     Dagny Distefano      0.134
      Racheal Ravelo      0.132
     Kayla Krajewski      0.105
   Marylee Malatesta      0.512
         Janna Jacob      0.300
         Alita Aikin      0.027
       Junko Jungers      0.310
         Denese Diem      0.742
>
>
>
> cleanEx()
> nameEx("summary.simulater")
> ### * summary.simulater
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.simulater
> ### Title: Summary method for the simulater function
> ### Aliases: summary.simulater
>
> ### ** Examples
>
> result <- simulater(norm = "demand 2000 1000")
> summary(result)
Summarize numeric variables:
           n missing     mean   median       min      max      25%      75%       sd    se   cv
 demand 1000       0 1988.352 1964.676 -1008.049 5810.277 1302.627 2688.428 1034.916 1.035 0.52

>
>
>
> cleanEx()
> nameEx("summary.single_mean")
> ### * summary.single_mean
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.single_mean
> ### Title: Summary method for the single_mean function
> ### Aliases: summary.single_mean
>
> ### ** Examples
>
> result <- single_mean("diamonds","price")
> summary(result)
Single mean test
Data      : diamonds
Variable  : price
Confidence: 0.95
Null hyp. : the mean of price = 0
Alt. hyp. : the mean of price is not equal to 0

     mean t.value p.value   df     2.5%    97.5%       sd    n
 3907.186  54.084  < .001 2999 3765.535 4048.837 3956.915 3000
> diamonds %>% single_mean("price") %>% summary
Single mean test
Data      : -----
Variable  : price
Confidence: 0.95
Null hyp. : the mean of price = 0
Alt. hyp. : the mean of price is not equal to 0

     mean t.value p.value   df     2.5%    97.5%       sd    n
 3907.186  54.084  < .001 2999 3765.535 4048.837 3956.915 3000
>
>
>
> cleanEx()
> nameEx("summary.single_prop")
> ### * summary.single_prop
>
> flush(stderr()); flush(stdout())
>
> ### Name: summary.single_prop
> ### Title: Summary method for the single_prop function
> ### Aliases: summary.single_prop
>
> ### ** Examples
>
> result <- single_prop("diamonds","clarity", lev = "IF", comp_value = 0.05)
> summary(result)
Single proportion test
Data      : diamonds
Variable  : clarity
Confidence: 0.95
Null hyp. : the proportion of IF in clarity = 0.05
Alt. hyp. : the proportion of IF in clarity not equal to 0.05

  prop chisq.value p.value df  2.5% 97.5% ns    n
 0.033      18.253  < .001  1 0.027  0.04 99 3000
> diamonds %>% single_prop("clarity", lev = "IF", comp_value = 0.05) %>% summary
Single proportion test
Data      : -----
Variable  : clarity
Confidence: 0.95
Null hyp. : the proportion of IF in clarity = 0.05
Alt. hyp. : the proportion of IF in clarity not equal to 0.05

  prop chisq.value p.value df  2.5% 97.5% ns    n
 0.033      18.253  < .001  1 0.027  0.04 99 3000
>
>
>
> cleanEx()
> nameEx("test_specs")
> ### * test_specs
>
> flush(stderr()); flush(stdout())
>
> ### Name: test_specs
> ### Title: Add interaction terms to list of test variables if needed
> ### Aliases: test_specs
>
> ### ** Examples
>
> test_specs("a", c("a:b", "b:c"))
Interaction terms contain variables specified for testing.
Relevant interaction terms are included in the requested test.

[1] "a"   "a:b"
>
>
>
> cleanEx()
> nameEx("the_table")
> ### * the_table
>
> flush(stderr()); flush(stdout())
>
> ### Name: the_table
> ### Title: Function to calculate the PW and IW table for conjoint
> ### Aliases: the_table
>
> ### ** Examples
>
> result <- conjoint(dataset = "mp3", dep_var = "Rating", indep_var = "Memory:Shape")
> the_table(result$model, result$dat, result$indep_var)
$PW
                   Attributes      Levels      PW
Memory4GB              Memory         4GB   0.000
Memory6GB              Memory         6GB   7.667
Memory8GB              Memory         8GB  29.667
RadioNo                 Radio          No   0.000
RadioYes                Radio         Yes   6.111
SizeLarge                Size       Large   0.000
SizeMedium               Size      Medium   6.333
SizeSmall                Size       Small   8.500
Price$50                Price         $50   0.000
Price$100               Price        $100  -6.833
Price$150               Price        $150 -33.833
ShapeCircular           Shape    Circular   0.000
ShapeRectangular        Shape Rectangular -27.833
ShapeSquare             Shape      Square -13.333
15               Base utility           ~  58.111

$IW
  Attributes    IW
1     Memory 0.280
2      Radio 0.058
3       Size 0.080
4      Price 0.319
5      Shape 0.263

$plot_ylim
             Min      Max
Memory   0.00000 34.17167
Radio    0.00000 34.17167
Size     0.00000 34.17167
Price  -34.17167  0.00000
Shape  -34.17167  0.00000

>
>
>
> cleanEx()
> nameEx("var_check")
> ### * var_check
>
> flush(stderr()); flush(stdout())
>
> ### Name: var_check
> ### Title: Check if main effects for all interaction effects are included
> ###   in the model If ':' is used to select a range _indep_var_ is updated
> ### Aliases: var_check
>
> ### ** Examples
>
> var_check("a:d", c("a","b","c","d"))
$vars
[1] "a" "b" "c" "d"

$iv
[1] "a" "b" "c" "d"

$intv
[1] ""

> var_check(c("a", "b"), c("a", "b"), "a:c")
Interaction terms contain variables not selected as main effects.
Removing all interactions from the estimation$vars
[1] "a" "b"

$iv
[1] "a" "b"

$intv
[1] ""

>
>
>
> cleanEx()
> nameEx("viewdata")
> ### * viewdata
>
> flush(stderr()); flush(stdout())
>
> ### Name: viewdata
> ### Title: View data
> ### Aliases: viewdata
>
> ### ** Examples
>
> if (interactive()) {
+ viewdata(mtcars)
+ viewdata("mtcars")
+ mtcars %>% viewdata
+ }
>
>
>
> cleanEx()
> nameEx("visualize")
> ### * visualize
>
> flush(stderr()); flush(stdout())
>
> ### Name: visualize
> ### Title: Visualize data using ggplot2 <URL:
> ###   http://docs.ggplot2.org/current/>
> ### Aliases: visualize
>
> ### ** Examples
>
> visualize("diamonds", "carat", "price", type = "scatter", check = "loess")
geom_smooth: method="auto" and size of largest group is >=1000, so using gam with formula: y ~ s(x, bs = "cs"). Use 'method = x' to change the smoothing method.
> visualize("diamonds", "price:x", type = "hist")
> visualize("diamonds", "carat:x", yvar = "price", type = "scatter")
> visualize(dataset = "diamonds", yvar = "price", xvar = "carat", type = "scatter", custom = TRUE) +
+   ggtitle("A scatterplot") + xlab("price in $")
> visualize(dataset = "diamonds", xvar = "price:carat", custom = TRUE) %>%
+   {.[[1]] + ggtitle("A histogram") + xlab("price in $")}
> diamonds %>% visualize(c("price","carat","depth"), type = "density")
>
>
>
> cleanEx()

detaching ‘package:mgcv’, ‘package:nlme’

> nameEx("win_launcher")
> ### * win_launcher
>
> flush(stderr()); flush(stdout())
>
> ### Name: win_launcher
> ### Title: Create a launcher and updater for Windows (.bat)
> ### Aliases: win_launcher
>
> ### ** Examples
>
> if (interactive()) {
+   if (Sys.info()["sysname"] == "Windows") {
+     win_launcher()
+     fn <- paste0(Sys.getenv("USERPROFILE") ,"/Desktop/radiant.bat")
+     if (!file.exists(fn))
+       stop("Windows launcher not created")
+     else
+       unlink(fn)
+   }
+ }
>
>
>
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  23.631 0.517 24.52 0 0
> grDevices::dev.off()
null device
          1
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
